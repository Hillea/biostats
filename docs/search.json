[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biostatistics",
    "section": "",
    "text": "Welcome to the website of the course “Biostatistics” of the master’s programme “Translational Neuroscience” of the Julius-Maximilians-University Würzburg.\nPlease use the navigation on the left to select the slides for each session (recommendation: Open in new tab).\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReading\nLecturer\nProject Deadlines\n\n\n\n\n16.10.\nGeneral & R Intro\nST21: 1-3, QF: 1-3\nReutter\nR & RStudio installed\n\n\n23.10.\nModels\nST21: 4, QF: 4-6\nHildebrandt\n\n\n\n30.10.\nData Wrangling\nST21: 4, QF: 4-6\nReutter\n\n\n\n06.11.\nData Visualization\nQF: 7\nReutter\n\n\n\n13.11.\nProbability\nST21: 7-8, QF: 8\nHildebrandt\nDataset\n\n\n20.11.\nPenance Day\n\n\n\n\n\n27.11.\nSampling\nST21: 7-8, QF: 8\nHildebrandt\n\n\n\n04.12.\nHypothesis Testing\nST21: 9-10\nReutter\n\n\n\n11.12.\nComparing Means & Categories\nST21: 12, 15\nReutter\nResearch Question & Hypotheses\n\n\n18.12.\nExercises (t-Tests, Chi²)\nST21: 12, 15\nReutter\n\n\n\n25.12. & 01.01.\nChristmas & New Year’s\n\n\n\n\n\n08.01.\n(General) Linear Models\nST21: 12-13\nHildebrandt\nFirst Analysis Ideas\n\n\n15.01.\nExercises (GLM)\nST21: 12-13\nHildebrandt\n\n\n\n22.01.\nLinear Mixed Models\nST21: 14\nHildebrandt\nAnalysis (with R scripts)\n\n\n29.01.\nR Markdown for Reports\n\nReutter\n\n\n\n05.02.\nTroubleshooting Your Report\n\nboth\nSend Questions via Email\n\n\n12.02.\nReproducible Research\nST21: 18\nHildebrandt\nReport (with R Markdown)"
  },
  {
    "objectID": "W1_Intro.html#hello",
    "href": "W1_Intro.html#hello",
    "title": "01a Introduction to Biostatistics",
    "section": "Hello!",
    "text": "Hello!\nWho am I?\n\nWho are you?\n\nWhat is your background?\nDo you have experience with data analysis?\nWhat’s your attitude towards statistics?",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#using-the-slides",
    "href": "W1_Intro.html#using-the-slides",
    "title": "01a Introduction to Biostatistics",
    "section": "Using the Slides",
    "text": "Using the Slides\n\nThese slides are created directly in R with the quarto extension.\nYou can jump to a slide by clicking the three dashes in the bottom left.\nYou can conveniently copy R code from the slides with one click and paste it into your RStudio.\n\n\nprint(\"Hello World\")\n\n[1] \"Hello World\"",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#organizational-issues",
    "href": "W1_Intro.html#organizational-issues",
    "title": "01a Introduction to Biostatistics",
    "section": "Organizational Issues",
    "text": "Organizational Issues\n\n\n\nAttendance is mandatory! (I don’t make the rules :) )\n\nYou may miss one session without giving reasons (recommendation: don’t waste it early!)\nIf you miss additional sessions, please write an email with an explanation (further proof may be required, e.g. doctor’s certificate)\n\n\n\n\n\nThe course will take place in person\n\nOnly for students who are not in Würzburg yet, there is an option via Zoom\n\n\n\n\n\nWe will use these textbooks (Open Educational Resources - freely available online, also linked in WueCampus):\n\nStatistical Thinking for the 21st Century\nFor the R part: Fundamentals of Quantitative Analysis\n(Additional Resource: R for Data Science)",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#contents",
    "href": "W1_Intro.html#contents",
    "title": "01a Introduction to Biostatistics",
    "section": "Contents",
    "text": "Contents\n\n\nFrom basic probability to (Generalized) Linear Mixed Models\n\nSome things may be repetitive for you but this course aims to provide a common starting position for your next semesters\n\nInput (lecture style) with hands-on R sessions \nIn addition, you should read a few pages in the text books\n(Statistical Thinking for the 21st Century, and possibly Fundamentals of Quantitative Analysis)\nProject: Independently analyze a dataset (exam with pass or fail grading)\n\n\n\nFor some, e.g. the psychologists, it will be more of a repetition - but you will also learn R.\nSlides might be text heavy → so that you can go through the slides afterwards again (but textbook might also be helpful)",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#project",
    "href": "W1_Intro.html#project",
    "title": "01a Introduction to Biostatistics",
    "section": "Project",
    "text": "Project\n\n\nFind a dataset that can answer a question you are interested in\n\nhttps://ourworldindata.org/\nStatistisches Bundesamt\nYour own, e.g., from an internship\n\n\n\n\n\npreprocess/wrangle it,\nanalyze the data,\nand write a short (min. 2-page) report!\n\nshort intro incl. research question and hypothesis\nmethods (both how the data were acquired and how they are analyzed)\nresults (incl. at least one plot)\nand a short discussion.\n\nAll these parts should be at least half a page long.",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#schedule",
    "href": "W1_Intro.html#schedule",
    "title": "01a Introduction to Biostatistics",
    "section": "Schedule",
    "text": "Schedule\nThe up-to-date version can be found at https://spressi.github.io/biostats/\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReading\nLecturer\nProject Deadlines\n\n\n\n\n16.10.\nGeneral & R Intro\nST21: 1-3, QF: 1-3\nReutter\nR & RStudio installed\n\n\n23.10.\nProbability\nST21: 4, QF: 4-6\nHildebrandt\n\n\n\n30.10.\nData Wrangling\nST21: 4, QF: 4-6\nReutter\n\n\n\n06.11.\nData Visualization\nQF: 7\nReutter\n\n\n\n13.11.\nSampling\nST21: 7-8, QF: 8\nHildebrandt\nDataset\n\n\n20.11.\nPenance Day\n\n\n\n\n\n27.11.\nProbability & Sampling in R\nST21: 7-8, QF: 8\nHildebrandt\n\n\n\n04.12.\nHypothesis Testing\nST21: 9-10\nReutter\n\n\n\n11.12.\nComparing Means & Categories\nST21: 12, 15\nReutter\nResearch Question & Hypotheses\n\n\n18.12.\nExercises (t-Tests, Chi²)\nST21: 12, 15\nReutter\n\n\n\n25.12. & 01.01.\nChristmas & New Year’s\n\n\n\n\n\n08.01.\n(General) Linear Models\nST21: 12-13\nHildebrandt\nFirst Analysis Ideas\n\n\n15.01.\nExercises (GLM)\nST21: 12-13\nHildebrandt\n\n\n\n22.01.\nLinear Mixed Models\nST21: 14\nHildebrandt\nAnalysis (with R scripts)\n\n\n29.01.\nR Markdown for Reports\n\nReutter\n\n\n\n05.02.\nTroubleshooting Your Report\n\nboth\nSend Questions via Email\n\n\n12.02.\nReproducible Research\nST21: 18\nHildebrandt\nReport (with R Markdown)\n\n\n\n\n\nST21: Statistical Thinking for the 21st Century\nQF: Fundamentals of Quantitative Analysis (QuantFun)",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#why-is-it-important-that-you-know-statistics",
    "href": "W1_Intro.html#why-is-it-important-that-you-know-statistics",
    "title": "01a Introduction to Biostatistics",
    "section": "Why is it important that YOU know statistics?",
    "text": "Why is it important that YOU know statistics?\n\n\nYou’re doing a research master!\n\nResearch = Reading & understanding papers (esp. the analyses)\nDesigning your own experiments, analyze data, interpret results\n\nWe live in an increasingly data-centric world\n\nKnowing how to wrangle and analyze data is a valuable skill\n\nFacts & data literacy matter more than ever!\n\nFake News, “Lying with stats”, Reproducibility Crisis\nBeing able to call bullshit (https://www.callingbullshit.org/)\n\n“I only believe in statistics that I doctored myself” ― Winston S. Churchill\n\nHowever: “It is easy to lie with statistics, but easier to lie without them” ― Frederick Mosteller",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#what-is-statistical-thinking",
    "href": "W1_Intro.html#what-is-statistical-thinking",
    "title": "01a Introduction to Biostatistics",
    "section": "What is Statistical Thinking?",
    "text": "What is Statistical Thinking?\n\n\n“a systematic way of thinking about how we describe the world and use data [to] make decisions and predictions, all in the context of the inherent uncertainty that exists in the real world.” (Poldrack, Preface of ST21)\n“Statistical thinking is a way of understanding a complex world by describing it in relatively simple terms that nonetheless capture essential aspects of its structure or function, and that also provide us some idea of how uncertain we are about that knowledge.” (Poldrack, Chapter 1)\n\n\n\nbreak down complexity, include uncertainty",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#why-is-statistical-thinking-important",
    "href": "W1_Intro.html#why-is-statistical-thinking-important",
    "title": "01a Introduction to Biostatistics",
    "section": "Why is Statistical Thinking Important?",
    "text": "Why is Statistical Thinking Important?\n\n\ndata literacy vs. intuition/heuristics/anecdotal evidence\n\nPublic discourse about Covid-19, migration, etc. (e.g., “50% of people in intensive care are vaccinated”)\n\n\n\n\n\n\n\n\n\n\n\nBase Rate Fallacy\n\n\n\nexample availability heuristic from book (or any other example where intuition is wrong, i.e. vaccinations/covid…)",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#what-can-statistics-do-for-us",
    "href": "W1_Intro.html#what-can-statistics-do-for-us",
    "title": "01a Introduction to Biostatistics",
    "section": "What can Statistics Do For Us?",
    "text": "What can Statistics Do For Us?\n\nDescribe patterns by summarizing/breaking down data (“descriptive statistics”)\nDecide whether one thing is better than another, given the uncertainty (“inferential statistics”)\nPredict how other people would “behave” (generalize to new observations)\n\n\ndescribe: not useful to look at every single data point/person, but we need s.th. like tendencies/trends…",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#the-big-ideas",
    "href": "W1_Intro.html#the-big-ideas",
    "title": "01a Introduction to Biostatistics",
    "section": "The Big Ideas",
    "text": "The Big Ideas\n\n\nLearning from data: Update our beliefs\nAggregation: How to summarize the data to draw meaningful conclusions?\nUncertainty: Probabilistic evidence\nSampling from the population: Which people etc. do we select?\n\n\n\nask for every point what I could mean w/ it?\nLearning from data: gather new knowledge or even just hypotheses\nAggregation: Can’t look at all ind data points, need to find trends etc. (should not go too far! throwing out data)\nUncertainty: stats = tools for making decisions under uncertainty, we can never prove anything but provide evidence, there is no 100% certainty for an outcome\nsampling: how do we represent the population? What is the population? how much data do we need? More is better, but payoff decreases…",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#causality",
    "href": "W1_Intro.html#causality",
    "title": "01a Introduction to Biostatistics",
    "section": "Causality",
    "text": "Causality\nCorrelation does not imply causation… but is a hint!\n\nExample: Smoking = less risk for Parkinson’s disease? (Godwin-Austen et al., 1982; Chen et al., 2010)\n\n\n→ confounding factors?\n\n\ne.g., individual dopaminergic activity ⇒ addiction & motor function\n\n\nRandomized Controlled Trials (RCT) as the solution?\n\nRCT: exp control and manipulation, removes confounds if done well\nAt least some more causal evidence!\nQUESTIONS so far?",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#what-are-data",
    "href": "W1_Intro.html#what-are-data",
    "title": "01a Introduction to Biostatistics",
    "section": "What are Data?",
    "text": "What are Data?\n\nWhat do you think are data?\n\n\n\nqualitative vs. quantitative\n\nqualitative?\n\nopen questions, descriptions… can potentially be coded into categories\n\nquantitative?\n\nnumeric, can be averaged etc.\n\n\n\n\n\nChat → after showing slide! Come up with examples for “Data”\nCollect: Do you have ideas? What are data you encounter in your lives/work etc? What are differences between these data?",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#what-are-data-2",
    "href": "W1_Intro.html#what-are-data-2",
    "title": "01a Introduction to Biostatistics",
    "section": "What are Data? (2)",
    "text": "What are Data? (2)\n\n\nData types\n\ncharacter/string: text (qualitative)\nfactors/categories\ntypes of numbers (quantitative)\n\nbinary: 0 or 1, TRUE or FALSE (logical)\nintegers: whole numbers\nreal numbers: decimals/fractions\n\n\ndiscrete vs. continuous\n\ndiscrete: finite set of particular values (0 or 1, scale from 1 to 10)\ncontinuous: real numbers that fall into particular range (e.g., brain activity, visual analoge scale)\n\nWhat data type is eye color?\n\n\n\neye color can be categorical (e.g., “brown”, “blue”, “green”) or numerical (wave length in nm)",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#what-is-a-data-set",
    "href": "W1_Intro.html#what-is-a-data-set",
    "title": "01a Introduction to Biostatistics",
    "section": "What is a Data Set?",
    "text": "What is a Data Set?\n\na collection of data\nusually organized into rows and columns (like an excel spreadsheet)\n\nrows: participants/animals/cells…\ncolumns: variables!\n\neach variable contains one type of measurement\n\ntable cells = unique observations of variables per participant etc.\n\n\n\nNHANES dataset\npossibly go through columns and ask for data types?",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#what-makes-a-good-measurement",
    "href": "W1_Intro.html#what-makes-a-good-measurement",
    "title": "01a Introduction to Biostatistics",
    "section": "What Makes a Good Measurement?",
    "text": "What Makes a Good Measurement?\n\n\n\nWhat is being measured?\n\nconstructs vs. proxies: need to be well-defined! (Difficult)\nmeasurement error\n\nrandom: e.g., variation in reaction times of same participant across trials\nsystematic: e.g., miscalibrated eye-tracking device\n\n\nDo we have a “gold standard” to compare the measurement to?\n\n\n\nBreak-Out session: Brainstorm what makes a good vs. bad measurement!\nGroup work/brainstorm:\n\nWhat are problems?\nWhich kind of errors/when is data NOT good\nhow can we minimize error?",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#reliability",
    "href": "W1_Intro.html#reliability",
    "title": "01a Introduction to Biostatistics",
    "section": "Reliability",
    "text": "Reliability\nCorrelation of a measurement with “itself”\n\n\nInternal reliability (consistency)\nTest-retest reliability (stability)\nInter-rater reliability (agreement)\n\n\n\nCorrelation with other variables can’t be higher than reliability (cf., Wilmer et al., 2012, Table 1)!",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#validity",
    "href": "W1_Intro.html#validity",
    "title": "01a Introduction to Biostatistics",
    "section": "Validity",
    "text": "Validity\nAre we measuring the construct we’re interested in?\n\n\nFace validity: Does it intuitively make sense? First reality check!\nConstruct validity\n\nconvergent validity: Related to similar measures that should measure the same construct\ndivergent validity: Is it unrelated to other measures?\n\nPredictive validity: Is it predictive of other outcomes? (e.g., intelligence & job success)",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#validity-reliability",
    "href": "W1_Intro.html#validity-reliability",
    "title": "01a Introduction to Biostatistics",
    "section": "Validity & Reliability",
    "text": "Validity & Reliability\n\nReliability & Validity",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1_Intro.html#summarizing-data",
    "href": "W1_Intro.html#summarizing-data",
    "title": "01a Introduction to Biostatistics",
    "section": "Summarizing Data",
    "text": "Summarizing Data\n\n\nThrowing away (some of the) information!\n\nextract the quintessence of the data (important for forming models)\nmake predictions\n\nCounts, frequencies, percentages, averages",
    "crumbs": [
      "01a Introduction to Biostatistics"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#general-working-with-r-in-this-course",
    "href": "W1b_IntroR.html#general-working-with-r-in-this-course",
    "title": "01b Intro to R",
    "section": "General: Working with R in this course",
    "text": "General: Working with R in this course\nDuring Class\n\nYou should have RStudio open and your Biostats project loaded (we will set up the project today).\nHave the slides open in the background. You will need them to copy R code (top right button on any code chunk) or click on links.\n\n\nprint(\"Hello World\")\n\n[1] \"Hello World\"\n\n\n\nRemember: You can navigate through the slides quickly by clicking on the three dashes in the bottom left.\n\n\n\nAt Home\nIf possible, use two screens with the slides (Zoom) opened on one and RStudio on the other",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#why-write-code",
    "href": "W1b_IntroR.html#why-write-code",
    "title": "01b Intro to R",
    "section": "Why write code?",
    "text": "Why write code?\n\n\nDoing statistical calculation by hand? Tedious & error prone! Computer is faster…\nUsing spreadsheets? Limited options, change data accidentally…\nUsing point-and-click software (e.g., SPSS)?\n\nproprietary software = expensive\nR = open, extensible (community)\nreproducible!\n\nScience/Academia is a marathon and not a sprint\n⇒ it is worthwhile investing in skills with a slow learning curve that will pay off in the long run\n\n\n\nChat: What are advantages (or disadvantages!) of coding?",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#why-write-code-1",
    "href": "W1b_IntroR.html#why-write-code-1",
    "title": "01b Intro to R",
    "section": "Why write code?",
    "text": "Why write code?",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#managing-expectations",
    "href": "W1b_IntroR.html#managing-expectations",
    "title": "01b Intro to R",
    "section": "Managing Expectations",
    "text": "Managing Expectations\n\nYou will learn a new (programming) language. Don’t expect to “speak” it fluently right away.\nDuring class, it is more important that you can roughly comprehend written code and “translate” it into natural language.\nThe second step is to be able to make small adjustments to code that is given to you.\nOnly then, the last step is to be able to produce code yourself (with the help of Google, Stackoverflow, templates of this course, etc. :) ).\nBut: Use it or loose it! Don’t wait to use R in your research projects until you’re “good enough”. It’s more fun to use it on “actual” problems, and makes it much easier to learn.",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#install-r-rstudio",
    "href": "W1b_IntroR.html#install-r-rstudio",
    "title": "01b Intro to R",
    "section": "Install R & RStudio",
    "text": "Install R & RStudio\nYou should all have installed R & RStudio by now! Who had problems doing so?",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#overview-rstudio",
    "href": "W1b_IntroR.html#overview-rstudio",
    "title": "01b Intro to R",
    "section": "Overview RStudio",
    "text": "Overview RStudio\n\nRStudio Interface\nopen R!",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#rstudio-panes",
    "href": "W1b_IntroR.html#rstudio-panes",
    "title": "01b Intro to R",
    "section": "RStudio Panes",
    "text": "RStudio Panes\n\n\n\nScript pane: view, edit, & save your code\nConsole: here the commands are run and rudimentary output may be provided\nEnvironment: which variables/data are available\nFiles, plots, help etc.\n\n\n\n\n\n\n\nRStudio Interface\n\n\n\n\n\nConsole vs. Script (Rmarkdown later)",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#using-the-console-as-a-calculator",
    "href": "W1b_IntroR.html#using-the-console-as-a-calculator",
    "title": "01b Intro to R",
    "section": "Using the Console as a Calculator",
    "text": "Using the Console as a Calculator\n\n100 + 1\n\n[1] 101\n\n2*3\n\n[1] 6\n\nsqrt(9)\n\n[1] 3\n\n\n\nConsole used as calculator\ntry it out!\nWe can’t really do much with these values, they will just be written in the console.\nAlso: Notice that you have the option to include spaces are not between commands, i.e., 100 + 1 vs. 100+1.",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#saving-the-results-as-a-variableobject",
    "href": "W1b_IntroR.html#saving-the-results-as-a-variableobject",
    "title": "01b Intro to R",
    "section": "Saving the Results as a Variable/Object",
    "text": "Saving the Results as a Variable/Object\n\na &lt;- 100 + 1\n\nmulti &lt;- 2*3\n\nSqrtOfNine &lt;- sqrt(9)\n\nword &lt;- \"Hello\"\n\n\n\n\n&lt;- is used to assign values to variables (= is also possible, but discouraged in R)\na, multi etc. are the variable names (some naming rules, e.g., no whitespace, must not start with a number, many special characters not allowed)\n\nYou can find those now in your Environment! (top right panel)\nNo feedback in the console for saving variables (2*3 outputs 6, but multi &lt;- 2*3 doesn’t)\n\nvariables can contain basically anything (words, numbers, entire tables of data …)\nthe variables contain the calculated value (i.e. 101) and not the calculation/formula (100+1)\n\n\n\nType first command in console, what happens?\nWhy don’t we see anything in the console?\nWhat happens if we type in a in the console?\nIs there anything else that you find interesting?\nWhat is sqrt()?",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#working-with-variables",
    "href": "W1b_IntroR.html#working-with-variables",
    "title": "01b Intro to R",
    "section": "Working with variables",
    "text": "Working with variables\n\na + multi\n\n[1] 107\n\na\n\n[1] 101\n\nmulti\n\n[1] 6\n\n\n\n\n\nYou can use those variables for further calculations, e.g., a + multi\nNote that neither a nor multi change their value.",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#working-with-variables-1",
    "href": "W1b_IntroR.html#working-with-variables-1",
    "title": "01b Intro to R",
    "section": "Working with variables",
    "text": "Working with variables\n\na\n\n[1] 101\n\na &lt;- 42\n\na\n\n[1] 42\n\n\n\n\nVariables can be overwritten (R won’t warn you about this!)",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#functions",
    "href": "W1b_IntroR.html#functions",
    "title": "01b Intro to R",
    "section": "Functions",
    "text": "Functions\nThis code with sqrt(9) looked unfamiliar. sqrt() is an R function that calculates the square root of a number. 9 is the argument that we hand over to the function.\nIf you want to know what a function does, which arguments it takes, or which output it generates, you can type into the console: ?functionname\n\n\n?sqrt\n\nThis will open the help file in the Help Pane on the lower right of RStudio.\nYou can also click on a function in the script or console pane and press the F1 key.\n\nSometimes, the help page can be a bit overwhelming (lots of technical details etc.). It might help you to scroll down to the examples at the bottom to see the function in action!\n\nDo this now! Anything unclear?",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#functions-1",
    "href": "W1b_IntroR.html#functions-1",
    "title": "01b Intro to R",
    "section": "Functions",
    "text": "Functions\nFunctions often take more than one argument (which have names):\n\n\nrnorm(n = 6, mean = 3, sd = 1)\nrnorm(6, 3, 1) # this outputs the same as above\n\n\nYou can explicitly name your arguments (check the help file for the argument names!) or just state the values (but these have to be in the correct order then! See help file).\n\n\n\n\n\nrnorm(n = 6, mean = 3, sd = 1)\n\nrnorm(6, 3, 1) # this outputs the same as above\nrnorm(sd = 1, n = 6, mean = 3) # still the same result\nrnorm(1, 6, 3) # different result - R thinks n = 1 and mean = 6!",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#comments",
    "href": "W1b_IntroR.html#comments",
    "title": "01b Intro to R",
    "section": "Comments",
    "text": "Comments\n\nrnorm(n = 6, mean = 3, sd = 1)\nrnorm(6, 3, 1) # this outputs the same as above\n\n# By the way, # denotes a comment - very important for documentation!\n# Anything after # will be ignored by R\n# To (un)comment the line you are in/multiple lines you selected: ctrl + shift + C",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#packages",
    "href": "W1b_IntroR.html#packages",
    "title": "01b Intro to R",
    "section": "Packages",
    "text": "Packages\nThere are a number of functions already included with Base R (i.e., R after a new installation), but you can greatly extend the power of R by loading packages (and we will!). Packages can e.g. contain collections of functions someone else wrote, or even data.\nYou should already have the tidyverse installed (if not, quickly run install.packages(\"tidyverse\") :-) )\n\n\n\nBut installing is not enough to be able to actually use the functions from that package directly. Usually, you also want to load the package with the library() function. This is the first thing you do at the top of an R script:\n\nlibrary(\"tidyverse\") # or library(tidyverse)\n\n\n\n\n\n(If you don’t load a package, you have to call functions explicitly by packagename::function)\n\nOpen Source! Anyone can write a package!\nBase R = mobile phone, comes with some functions, packages = apps\npossibly necessary to install Rtools!",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#new-project",
    "href": "W1b_IntroR.html#new-project",
    "title": "01b Intro to R",
    "section": "New Project",
    "text": "New Project\n\n\n\nCreate a new project by clicking on “File” on the top left and then “New Project…”\nSelect “New Directory” (if you already have a folder for this course, you can choose “Existing directory” and select that folder) and then choose “New Project” at the top of the list.\nChoose a project name, e.g., as “Biostats” (this will create a folder in which the project lives)\nBrowse where you want to put your project folder (e.g., “D:/Documents/Studies/Translational Neuroscience/”)\n\n\n\nPS: R can deal with folder and file names that contain spaces, but since some programms can’t, it’s best practice not to use whitespaces for file/folder naming.",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#existing-projects",
    "href": "W1b_IntroR.html#existing-projects",
    "title": "01b Intro to R",
    "section": "Existing Projects",
    "text": "Existing Projects\nYou will find the current project on the top right corner of RStudio\nIf you click on the current project, you can open new projects by choosing “Open Project” and select the .Rproj file of the project.\nYou can also just double click on .Rproj files and RStudio will open with the project loaded.\n\nExisting projects",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#why-projects",
    "href": "W1b_IntroR.html#why-projects",
    "title": "01b Intro to R",
    "section": "Why Projects",
    "text": "Why Projects\n\nProjects are not only convenient for us (e.g., scripts that we had opened before are re-opened when we open the project), they are also great for reproducibility.\nWe won’t cover the details here - see the “Further Reading” section of the course page!",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#using-scripts",
    "href": "W1b_IntroR.html#using-scripts",
    "title": "01b Intro to R",
    "section": "Using Scripts",
    "text": "Using Scripts\nTo open a new script, click File \\(\\to\\) New File \\(\\to\\) R Script. (Ctrl + Shift + N)\nTo run a line of the script, you can either click Run at the top right of the pane or Ctrl + Enter. It will run the code that is highlighted/selected or automatically select the current line (or the complete multi-line command).\nTo run the whole script/chunk, press Ctrl + Shift + Enter (with full console output) or Ctrl + Shift + S (limited output).\n\n\nUsing scripts",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#working-with-vectors",
    "href": "W1b_IntroR.html#working-with-vectors",
    "title": "01b Intro to R",
    "section": "Working with vectors",
    "text": "Working with vectors\n\nOf course, vectors can be stored in variables.\n\n\n\nmy_vector &lt;- c(1, 2, 10)\n\nshopping_list &lt;- c(\"flour\", \"eggs\", \"apples\")",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#vector-operations",
    "href": "W1b_IntroR.html#vector-operations",
    "title": "01b Intro to R",
    "section": "Vector operations",
    "text": "Vector operations\n\nBut the real fun is that R is “vectorized”, which allows us to do some funny tricks.\nNote that this is different from usual “vector math”.\n\n\n\nc(1, 2, 5) + 1\n\n[1] 2 3 6\n\nc(2, 4, 6) + c(1, 0, 2)\n\n[1] 3 4 8\n\n# Can you spot what happens HERE?!\nc(2, 4, 6, 5, 0, 0) + c(1, 10)\n\n[1]  3 14  7 15  1 10",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#get-the-data",
    "href": "W1b_IntroR.html#get-the-data",
    "title": "01b Intro to R",
    "section": "Get the data",
    "text": "Get the data\nTo read in data files, you need to know which format these files have, e.g. .txt. or .csv files or some other (proprietary) format. There are packages that enable you to read in data of different formats like Excel (.xlsx).\nWe will use the files from Fundamentals of Quantitative Analysis: ahi-cesd.csv and participant-info.csv. Save these directly in your project folder on your computer (do not open them!).\n\n\n\nDid you find the files? Here are the direct links:\n\nhttps://psyteachr.github.io/quant-fun-v2/ahi-cesd.csv\nhttps://psyteachr.github.io/quant-fun-v2/participant-info.csv",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#read-in-the-data",
    "href": "W1b_IntroR.html#read-in-the-data",
    "title": "01b Intro to R",
    "section": "Read in the data",
    "text": "Read in the data\nCreate a new script with the following content:\n\nlibrary(tidyverse) # we will use a function from the tidyverse to read in the data\n\ndat &lt;- read_csv(\"ahi-cesd.csv\")\npinfo &lt;- read_csv(\"participant-info.csv\")\n\nRun the code!",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#looking-at-the-data",
    "href": "W1b_IntroR.html#looking-at-the-data",
    "title": "01b Intro to R",
    "section": "Looking at the Data",
    "text": "Looking at the Data\n\nThere are several options to get a glimpse at the data:\n\nClick on dat and pinfo in your Environment.\nType View(dat) into the console or into the script pane and run it.\nRun str(dat) or str(pinfo) to get an overview of the data.\nRun summary(dat).\nRun head(dat), print(dat), or even just dat.\nWhat is the difference between these commands?",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W1b_IntroR.html#looking-at-the-data-2",
    "href": "W1b_IntroR.html#looking-at-the-data-2",
    "title": "01b Intro to R",
    "section": "Looking at the Data 2",
    "text": "Looking at the Data 2\nWhat is the difference to the objects/variables, that you assigned/saved in your Environment earlier and these objects?\n\nRStudio’s Environment panel\nThe two objects we just read in are data frames, which are “tables” of data (they can contain entire data sets). The objects we assigned earlier were simpler (single values, or “one-dimensional” vectors).\nData frames usually have several rows and columns. The columns are the variables and the rows are the observations (more about that later).",
    "crumbs": [
      "01b Intro to R"
    ]
  },
  {
    "objectID": "W2_Models.html#why-do-we-need-models",
    "href": "W2_Models.html#why-do-we-need-models",
    "title": "02 Models",
    "section": "Why do we need Models?",
    "text": "Why do we need Models?\nWhat can we do with data only? Where can a model be helpful?\n\nsummarize/simplify, generalize, explain",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#what-is-a-model",
    "href": "W2_Models.html#what-is-a-model",
    "title": "02 Models",
    "section": "What is a Model?",
    "text": "What is a Model?\n\n“models” are generally simplifications of things in the real world that nonetheless convey the essence of the thing being modeled\nAll models are wrong but some are useful (George Box)\n\n(ST21, Ch 5)\nAim: Find the model that efficiently and accurately summarizes the data.",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#a-simple-model",
    "href": "W2_Models.html#a-simple-model",
    "title": "02 Models",
    "section": "A Simple Model",
    "text": "A Simple Model\nLet’s say we want to have a model of height of students in this Biostatistics class (or height of children based on the NHANES dataset, as used in ST21, see below).\nWhat do you think would be a good model for the height of a student/child?\n(Or: Which value should we guess for a particular or new student/child?)\n\n\n\n\n\n\n\n\n\n\n\nHave them guess the height of an anonymous new student, discuss what could be relevant information. Gender = not known (prior knowledge!).\nMean = model?",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#basic-structure-of-statistical-models",
    "href": "W2_Models.html#basic-structure-of-statistical-models",
    "title": "02 Models",
    "section": "Basic structure of statistical models",
    "text": "Basic structure of statistical models\n\\[\ndata=model+error\n\\]\n\na statistical model is generally much simpler than the data being described; it is meant to capture the structure of the data as simply as possible.\nTwo parts:\n\none portion that is described by a statistical model, which expresses the values that we expect the data to take given our knowledge,\nerror that reflects the difference between the model’s predictions and the observed data.\n\nExample? (Average) age in classroom? All prior knowledge goes into model\n\n\nIn general, we want to predict single observations (denoted by i) from the model. The fact that we are looking at predictions and not at actual values of the data/observations is denoted by the “hat”:\n\\[ \\widehat{data_i} = model_i \\] The error is then simply the deviation of the actual data from the predicted values:\n\\[  error_i = data_i - \\widehat{data_i} \\]\nThis means that the predicted value of the data for observation i is equal to the value of the model for that observation.",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#a-simple-model-2",
    "href": "W2_Models.html#a-simple-model-2",
    "title": "02 Models",
    "section": "A Simple Model 2",
    "text": "A Simple Model 2\nThe simplest model would be to predict the mean of the height values for every student/child! This would imply that individual deviations of the mean would be interpreted to be (prediction) errors in such a model.\nWe can write such a simple model as a formula:\n\\[\ny_i = \\beta + \\epsilon\n\\]\n\\(y_i\\) denotes the individual observations (hence the \\(i\\)) of heights, \\(\\beta\\) is a so-called parameter, and \\(\\epsilon\\) is the error term. In this example, the parameter \\(\\beta\\) would be the same value (= the mean height) for everyone (hence it doesn’t need an \\(i\\) subscript). Parameters are values that we optimize to find the best model.\n\nWhat would be Yi, beta and error for the height example?",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#a-simple-model-3",
    "href": "W2_Models.html#a-simple-model-3",
    "title": "02 Models",
    "section": "A Simple Model 3",
    "text": "A Simple Model 3\nHow do we find parameters that belong to the best fitting model?\nHow did you come up with model for heights, e.g. the mean?\n\nWe try to minimize the error!\nRemember, the error is the difference between the actual and predicted values of \\(y\\) (height):\n\\[\nerror_i = y_i - \\hat{y_i}\n\\]\nIf we select a predicted value (or mean) of 400cm, all individuals’ errors would hugely deviate (because no one is 4m tall). If we average these errors, it would still be a big value.\nA better candidate for such a simple model is thus the arithmetic mean or average:\n\\[\n\\bar{X} = \\frac{\\sum_{i=1}^{n}x_i}{n}\n\\]\nSumming up all individual’s heights and dividing that number by the number of individuals gives us the mean. By definition, the average (directed) error is now 0 (see book for proof, the individual errors cancel out)! This means that the average has no bias to over- or underestimate observations (while 4m would have been a clear overestimation).",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#a-note-on-errors",
    "href": "W2_Models.html#a-note-on-errors",
    "title": "02 Models",
    "section": "A Note on Errors",
    "text": "A Note on Errors\nWe usually don’t simply average across the individual (signed) errors, but across the squared errors.\nThe reason is that we do not want positive and negative errors to cancel each other out.\nThe mean squared error would be in a different unit than the data (e.g., cm2), which is why we usually take the square root of that value to bring it back to the original unit: This leaves us with the root mean squared error (RMSE)!\nNote: We could also use the absolute values of errors, sum those up, and avoid any of these problems. For historical reasons, we do not.",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#a-slightly-more-complex-model",
    "href": "W2_Models.html#a-slightly-more-complex-model",
    "title": "02 Models",
    "section": "A Slightly More Complex Model",
    "text": "A Slightly More Complex Model\nObviously, the model for predicting height from the average is not very good (RMSE = 27 cm). How can we improve this model?\n\nWe can account for other information that we might have!\nFor example, to account for age might be a good idea: Older children are likely taller than younger ones. We plot height against age to visually inspect the relationship:\n\n\n\n\n\n\n\n\n\n\n\n\nRMSE: On average, 27 cm “wrong” per individual!\nA: raw data, visible strong relationship\nB: only age (linear relationship)\nC: intercept/constant\nD: also account for gender\n–&gt; line fits data increasingly better!",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#a-slightly-more-complex-model-2",
    "href": "W2_Models.html#a-slightly-more-complex-model-2",
    "title": "02 Models",
    "section": "A Slightly More Complex Model 2",
    "text": "A Slightly More Complex Model 2\nAs we can see, the line (~ model) fits the data points increasingly well, e.g. if we include a constant (also called “intercept”) and age. We would write this as this formula:\n\\[\n\\hat{y_i} = \\hat{\\beta_0} + \\hat{\\beta_1} * age_i\n\\]\nRemember from linear algebra that this defines a line:\n\\[\ny = intercept + slope * x\n\\]\nThus \\(\\beta_0\\) is the parameter for the intercept and \\(\\beta_1\\) for the slope of age!\nThe model fit is now much better: RMSE = 8.36 cm.\n\nAdding gender? Does not improve model too much! (compared to age)\n\nw/o intercept: A, no \\(\\beta_0\\)\nStats Software will estimate best values for \\(\\beta\\)’s",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#what-is-a-good-model",
    "href": "W2_Models.html#what-is-a-good-model",
    "title": "02 Models",
    "section": "What is a “Good” Model?",
    "text": "What is a “Good” Model?\nTwo aims:\n\nDescribe data well (= low error/RMSE)\nGeneralize to new data (low error when applied to new data)\n\nCan be conflicting!\n\nWhere does error come from?\nAny ideas? Where could the error come from in your height model?\n\n\n\n\nmeasurement error (noise): random variation in data\n\ndependent variable is hard to measure precisely (difficult/noisy conditions)\ncheap/inadequate equipment for measuring\n\nwrong model specification\n\nimportant variable is missing from model (age!)\ne.g., height has a quadratic relationship with age (old people shrink again)",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#examples-measurement-error",
    "href": "W2_Models.html#examples-measurement-error",
    "title": "02 Models",
    "section": "Examples Measurement Error",
    "text": "Examples Measurement Error\n\nSimulated relationship between blood alcohol content and reaction time on a driving test, with best-fitting linear model represented by the line. A: linear relationship with low measurement error. B: linear relationship with higher measurement error. C: Nonlinear relationship with low measurement error and (incorrect) linear model\nA: very little error, all points close to fitted line\nB: same relationship much more variability across individuals\nC. wrongly specified model (caffeine!), not a linear relationship. Error high (deviations points - line)",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#can-a-model-be-too-good",
    "href": "W2_Models.html#can-a-model-be-too-good",
    "title": "02 Models",
    "section": "Can a Model be “too Good”?",
    "text": "Can a Model be “too Good”?\nYes! This is called overfitting.\n\nIf we fit a line too closely to the data (e.g., with an 8th degree polynomial), the model might not be able to generalize to other data well.\n\n\n\n\n\nAn example of overfitting. Both datasets were generated using the same model, with different random noise added to generate each set. The left panel shows the data used to fit the model, with a simple linear fit in blue and a complex (8th order polynomial) fit in red. The root mean square error (RMSE) values for each model are shown in the figure; in this case, the complex model has a lower RMSE than the simple model. The right panel shows the second dataset, with the same model overlaid on it and the RMSE values computed using the model obtained from the first dataset. Here we see that the simpler model actually fits the new dataset better than the more complex model, which was overfitted to the first dataset.\n\n\n\n\n\n\nHow would overfitting look like in your height examples?\n\nsame formula, different noise (simulation) ~ different individuals\nsimpler model fits new data better!\noverfitting in height examples?",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#central-tendency",
    "href": "W2_Models.html#central-tendency",
    "title": "02 Models",
    "section": "Central Tendency",
    "text": "Central Tendency\nWhy summarize data?\n\nA summary is a model & describes the data! E.g., mean = central tendency of the data\n\n\nMean, Median, Mode?\n\n\nMean = “Balance point” of data; minimizes sum of squared error, but highly influenced by outliers!\nMedian = “middle” of ranked data; minimizes sum of absolute error, less influenced by extreme values\nMode = most often occurring value (i.e., absolute peak)\n\n\nExample:\nIf 4 people earn 50,000 Euros per year and 1 person earns 1,000,000:\nMean: 240,000 Euros\nMedian: (Rank order: 10,000; 10,000; 10,000; 10,000; 1,000,000) -&gt; middle value = 10,000 Euros\nMode: 10,000 Euros\n\nexamples\nmean: income –&gt; if one person earns a million and 3 only 10.000 –&gt; mean = 257.500",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#variability",
    "href": "W2_Models.html#variability",
    "title": "02 Models",
    "section": "Variability",
    "text": "Variability\nHow widespread are the data?\n\nVariance and Standard Deviation\nVariance = Mean Squared Error\n\\[\n\\sigma^2 = \\frac{SSE}{N} = \\frac{\\sum_{i=1}^n (x_i - \\mu)^2}{N}\n\\]\n(Note: \\(x_i\\) = value of ind. observation, \\(\\mu\\) = population mean instead of \\(\\hat{X}\\) = sample mean)\n\n\nStandard Deviation ≈ Root Mean Squared Error\n\\[\nSD = \\sigma = \\sqrt{\\sigma^2}\n\\]\n\n\nWe usually don’t know the population mean \\(\\mu\\), that’s why we estimate the sample variance using the sample mean \\(\\hat{X}\\) (both with the “hat”) and the sample size \\(n\\) instead of the population size \\(N\\):\n\\[\n\\hat\\sigma^2 = \\frac{\\sum_{i=1}^n (x_i - \\hat{X})^2}{n-1}\n\\]\nNote: \\(n-1\\) is used to make the estimate more robust/less biased (I cannot give you an intuition why this is better… please trust me!).\n\nRemember plot above: Points either close to line or wide spread\nVariance = sigma^2, deviations of data points from mean (\\(\\mu\\)) squared and summed, divided by number of oberservations\n\\(n-1\\) = Degrees of Freedom, one value is fixed if we know the mean.",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W2_Models.html#comparing-apples-and-oranges-z-scores",
    "href": "W2_Models.html#comparing-apples-and-oranges-z-scores",
    "title": "02 Models",
    "section": "Comparing apples and oranges: Z-Scores",
    "text": "Comparing apples and oranges: Z-Scores\n\\[\nZ_i(x) = \\frac{x_i - \\mu}{\\sigma}\n\\]\n\n\nstandardizes the distribution: How far is any data point from the mean in units of SD?\ndoesn’t change original relationship of data points!\n\nshifts distribution to have a mean = 0 and scales it to have SD = 1.\n\nuseful if we compare (or use in a model) variables on different scales/units!\n\n\n\n\n\n\n\n\nDensity (top) and cumulative distribution (bottom) of a standard normal distribution, with cutoffs at one standard deviation above/below the mean.\n\n\n\n\n\nZ of x\nx_i is single value/data point\nmu, sigma\nz-scores: Now you can compare apples to oranges! Imagine two siblings from different classes battling it out on test results:\n- I got 70 points, you got only 60!\n- My test only had 70 points in total, yours had 85. I got 86% correct, you only 82%!\n- My test was harder! The average result was 60 with a standard deviation of 10, so I am 1 SD above the class average!\n- On my test, an average of 52 was achieved with an SD of 8, so I am also 1 SD above the class average. But people in your class are really stupid so that’s a very low standard to compare yourself.\nNarrator: And this was the end of comparability between apples and oranges :)",
    "crumbs": [
      "02 Models"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#accessing-variablescolumns",
    "href": "W3_DataWranglingR.html#accessing-variablescolumns",
    "title": "03 Data Wrangling",
    "section": "Accessing Variables/Columns",
    "text": "Accessing Variables/Columns\nWhen wrangling your data in R, you often want to access/use different columns, e.g. to calculate new ones. There are a number of ways you can do that:\n\n# create a small data set for this example:\ntestdata &lt;- data.frame(a = c(1, 2, 3),  # c() creates a vector!\n                       b = c(\"a\", \"b\", \"c\"),\n                       c = c(4, 5, 6),\n                       d = c(7, 8, 9),\n                       e = c(10, 11, 12))\n\nprint(testdata)\n\n  a b c d  e\n1 1 a 4 7 10\n2 2 b 5 8 11\n3 3 c 6 9 12\n\nstr(testdata)\n\n'data.frame':   3 obs. of  5 variables:\n $ a: num  1 2 3\n $ b: chr  \"a\" \"b\" \"c\"\n $ c: num  4 5 6\n $ d: num  7 8 9\n $ e: num  10 11 12\n\n\n\ndata.frame() = function to create a data.frame, which is what holds a data set! (tibbles..)\nc() = function to make a vector. A vector is just like one single column of a data frame: It can hold several values, but all of the same type.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#accessing-variablescolumns-2",
    "href": "W3_DataWranglingR.html#accessing-variablescolumns-2",
    "title": "03 Data Wrangling",
    "section": "Accessing Variables/Columns 2",
    "text": "Accessing Variables/Columns 2\nWhen wrangling your data in R, you often want to access/use different columns, e.g. to calculate new ones. There are a number of ways you can do that:\n\n# in baseR, we access elements of a data.frame with square brackets\ntestdata[1, 2] # get cell that is in first row and second column\n\n[1] \"a\"\n\ntestdata[1:2, 4:5] # use a colon to create ranges of values: first two rows and column numbers 4 and 5\n\n  d  e\n1 7 10\n2 8 11\n\n# we can leave one part empty to select ALL available columns/rows\ntestdata[1:2, ] # first two rows, all columns\n\n  a b c d  e\n1 1 a 4 7 10\n2 2 b 5 8 11\n\ntestdata[, 4:5] # columns number 4 and 5, all rows\n\n  d  e\n1 7 10\n2 8 11\n3 9 12\n\n\n\nsubsetting: rows, columns –&gt; leave empty!\nSelect range!\nUse either name or index of column!",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#accessing-variablescolumns-3",
    "href": "W3_DataWranglingR.html#accessing-variablescolumns-3",
    "title": "03 Data Wrangling",
    "section": "Accessing Variables/Columns 3",
    "text": "Accessing Variables/Columns 3\nWhen wrangling your data in R, you often want to access/use different columns, e.g. to calculate new ones. There are a number of ways you can do that:\n\n# it is usually better to access columns by their column name:\ntestdata[c(\"d\", \"e\")] # columns with names \"d\" and \"e\", all rows\n\n  d  e\n1 7 10\n2 8 11\n3 9 12\n\n# access a column only:\ntestdata[[\"a\"]] # double square brackets to get a vector (not a data.frame)\n\n[1] 1 2 3\n\ntestdata$a # short notation to get column \"a\" as a vector\n\n[1] 1 2 3\n\n\n\nbetter avoid the comma when accessing by column name:\n\n\n  a b\n1 1 a\n2 2 b\n3 3 c\n\n\n[1] 1 2 3\n\n\n  a b\n1 1 a\n2 2 b\n3 3 c\n\n\n  a\n1 1\n2 2\n3 3\n\n\n[1] 1 2 3\n\n\n=&gt; consistent data format without leading comma",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#accessing-variablescolumns-4",
    "href": "W3_DataWranglingR.html#accessing-variablescolumns-4",
    "title": "03 Data Wrangling",
    "section": "Accessing Variables/Columns 4",
    "text": "Accessing Variables/Columns 4\nWhen wrangling your data in R, you often want to access/use different columns, e.g. to calculate new ones. There are a number of ways you can do that:\n\n# tidy versions (see next slides)\nlibrary(tidyverse) # load tidyverse (if not already done)\npull(testdata, a) # same as testdata$a but can be used better in pipes (see next slide)\n\n[1] 1 2 3\n\nselect(testdata, a, b) # get column(s) as a data.frame; no c() needed!\n\n  a b\n1 1 a\n2 2 b\n3 3 c",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#tidyverse-2",
    "href": "W3_DataWranglingR.html#tidyverse-2",
    "title": "03 Data Wrangling",
    "section": "Tidyverse 2",
    "text": "Tidyverse 2\nBase R:\noutput_data1 &lt;- function1(data)\noutput_data2 &lt;- function2(output_data1, param1)\noutput_data3 &lt;- function3(output_data2, param2, param3)\n\nOr:\noutput_data &lt;- function3(function2(function1(data), param1), param2, param3)\n\n\nTidyverse:\noutput_data &lt;- data %&gt;% function1() %&gt;% function2(param1) %&gt;% function3(param2, param3)\n\n\nYou can insert a pipe %&gt;% (including spaces) by pressing Ctrl + Shift + M\n\n\nThe shortcut for the pipe (and other useful things like the assignment operator) can be adjusted in Tools -&gt; Modify Keyboard Shortcuts...\n\n\n\n%&gt;% is called the pipe. It takes the output of whatever happens to its left and “hands it over” to the right.\nSince R 4.1.0, there’s also a new base-R-pipe: |&gt;. It is very similar, but has a slightly limited functionality (see here).",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#tidyverse-3",
    "href": "W3_DataWranglingR.html#tidyverse-3",
    "title": "03 Data Wrangling",
    "section": "Tidyverse 3",
    "text": "Tidyverse 3\nlibrary(tidyverse) will load a number of packages, such as dplyr, ggplot2, readr, forcats, tibble etc., which are all usefuls for data wrangling.\nWe will work mainly with functions from the dplyr package, but also use readr to read in data. We will also use ggplot2 to visualize data.\nThe most important dplyr functions for data wrangling are:\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nselect()\nInclude or exclude certain columns (variables)\n\n\nfilter()\nInclude or exclude certain rows (observations)\n\n\nmutate()\nCreate new columns (variables)\n\n\nsummarize()\nCreate new columns that aggregate data/create summary variables for groups of observations (data frame will become smaller)\n\n\ngroup_by()\nOrganize the rows (observations) into groups\n\n\narrange()\nChange the order of rows (observations)\n\n\n\n\nfunction names very self-explanatory!\nWe don’t create new observations in R - this is job of the data acquisition - we just read the existing data",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#setting-up-libraries",
    "href": "W3_DataWranglingR.html#setting-up-libraries",
    "title": "03 Data Wrangling",
    "section": "Setting up libraries",
    "text": "Setting up libraries\n\nOpen your Biostats R project.\nCreate a new R script and save it, e.g. as “DataWrangling1.R”.\nInsert code to make sure the packages “tidyverse” and “babynames” are installed and loaded.\n\n\n\n# install.packages(\"tidyverse\")\n# install.packages(\"babynames\")\n\nlibrary(babynames)\nlibrary(tidyverse)\n\n\nload tidyverse last, otherwise functions with same name will be masked from package that is loaded first. Since we often need tidyverse functions, it’s safest to load it last!",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#look-at-the-data",
    "href": "W3_DataWranglingR.html#look-at-the-data",
    "title": "03 Data Wrangling",
    "section": "Look at the Data",
    "text": "Look at the Data\n\n\nType the word babynames into your console pane and press enter. What kind of information do you get?\n\n“A tibble: 1,924,665 x 5”\n\ntibble is an extension of the data.frame with more convenient output (e.g., values rounded to significant digits)\n~1.9 million rows/observations\n5 columns/variables\n\n\nWhat kind of columns/variables do we have?\n\ndbl = double/numeric (can take decimals)\nchr = character/string (letters or words)\nint = integer (only whole numbers)\n\n\n\n\nask first for 1 and 2",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#selecting-variables-of-interest",
    "href": "W3_DataWranglingR.html#selecting-variables-of-interest",
    "title": "03 Data Wrangling",
    "section": "Selecting Variables of Interest",
    "text": "Selecting Variables of Interest\nUse select() to choose only the columns year, sex, name, and prop and store it as a new tibble called babynames_reduced.\nRemember that you can run ?select in the console if you need help about, e.g., input/arguments to the function.\n\n\n# my favorite:\nbabynames_reduced &lt;- \n  babynames %&gt;% \n  select(year, sex, name, prop)\n\n# or alternatively:\nbabynames_reduced &lt;- \n  babynames %&gt;% \n  select(-n) # remove columns by using -\n\nRemoving columns vs. selecting columns: Results may change if the data get updated!\n\n\nSimilar to optional spaces for better readability, R allows for optional line breakes. You can try out what works best for you or look up some style guides.\n\n\n\nIt is encouraged to use many line breakes for better readability. Check out the Tidyverse Style Guide for suggestions.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#arranging-data",
    "href": "W3_DataWranglingR.html#arranging-data",
    "title": "03 Data Wrangling",
    "section": "Arranging Data",
    "text": "Arranging Data\nChange the order of the data (oberservations/rows)!\n\n\nUsing arrange(), try sorting the data according to the names column. What happens?\nHow can you sort a column in a descending fashion? Check out the help file (?arrange).\nLet’s sort by year descendingly and within each year, sort names alphabetically.\n\n\n\n\nsort_asc &lt;- babynames %&gt;% arrange(name)\n\nsort_desc &lt;- babynames %&gt;% arrange(desc(year)) \n\nbabynames %&gt;% arrange(desc(year), name) \n\n# A tibble: 1,924,665 × 5\n    year sex   name          n       prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n 1  2017 M     Aaban        11 0.0000056 \n 2  2017 F     Aabriella     6 0.0000032 \n 3  2017 M     Aadam        18 0.00000917\n 4  2017 M     Aadan         8 0.00000407\n 5  2017 M     Aadarsh      15 0.00000764\n 6  2017 M     Aaden       240 0.000122  \n 7  2017 M     Aadesh        7 0.00000357\n 8  2017 M     Aadhav       31 0.0000158 \n 9  2017 M     Aadhavan      6 0.00000306\n10  2017 M     Aadhi        10 0.00000509\n# ℹ 1,924,655 more rows\n\n\n\nremember to save data in new tibble/data frame!",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#filter-observations",
    "href": "W3_DataWranglingR.html#filter-observations",
    "title": "03 Data Wrangling",
    "section": "Filter Observations",
    "text": "Filter Observations\nWe have already used select() to keep only certain variables (columns), but often we also want to keep only certain observations (rows), e.g. babies born in the year 2000 and later.\nWe use the function filter() for this.\n\nLook at the following code and think about what it might do.\n\nbabynames %&gt;% \n  filter(year &gt; 2000)\n\n\n\n\n\n# A tibble: 562,156 × 5\n    year sex   name          n    prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;\n 1  2001 F     Emily     25055 0.0127 \n 2  2001 F     Madison   22164 0.0112 \n 3  2001 F     Hannah    20712 0.0105 \n 4  2001 F     Ashley    16526 0.00835\n 5  2001 F     Alexis    16401 0.00828\n 6  2001 F     Sarah     15896 0.00803\n 7  2001 F     Samantha  15862 0.00801\n 8  2001 F     Abigail   14807 0.00748\n 9  2001 F     Elizabeth 14784 0.00747\n10  2001 F     Olivia    13978 0.00706\n# ℹ 562,146 more rows\n\n\nThe data starts at 2001! :(",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#boolean-expressions",
    "href": "W3_DataWranglingR.html#boolean-expressions",
    "title": "03 Data Wrangling",
    "section": "Boolean Expressions",
    "text": "Boolean Expressions\nThe second argument, year &gt; 2000, is a Boolean or logical expression, which means that it results in a value of either TRUE or FALSE. filter() runs this expression and then removes all values/rows that contain FALSE.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#boolean-expressions-2",
    "href": "W3_DataWranglingR.html#boolean-expressions-2",
    "title": "03 Data Wrangling",
    "section": "Boolean Expressions 2",
    "text": "Boolean Expressions 2\n\nBoolean expressions\n\n\n\n\n\n\n\nOperator\nName\nis TRUE if and only if\n\n\n\n\nA &lt; B\nless than\nA is less than B\n\n\nA &lt;= B\nless than or equal\nA is less than or equal to B\n\n\nA &gt; B\ngreater than\nA is greater than B\n\n\nA &gt;= B\ngreater than or equal\nA is greater than or equal to B\n\n\nA == B\nequivalence\nA exactly equals B\n\n\nA != B\nnot equal\nA does not exactly equal B\n\n\nA %in% B\nin\nA is an element of vector B\n\n\n\n\n\nA double equality sign == is a comparison, a single equals = is a variable or parameter assignment.\nThis is why R users like to make the distinction even bigger by using &lt;- for variable assignment (your environment in the top right pane) and = for parameter assignment in functions (a hidden so-called local environment only visible to the function).\nAlso, there are slight differences between &lt;- and = for variable assignment, see here.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#filter-some-more-1",
    "href": "W3_DataWranglingR.html#filter-some-more-1",
    "title": "03 Data Wrangling",
    "section": "Filter some more 1",
    "text": "Filter some more 1\n\nKeep only those observations with the name “Mary”.\nDiscard all observations with name “Mary” and keep only those from year &gt; 2000.\nKeep only those with names of former Queens (Mary, Elizabeth, Victoria).\nDiscard the ones with the Queen names!\n\n\nFirst task:\n\nmarys &lt;- \n  babynames %&gt;% \n  filter(name == \"Mary\")",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#filter-some-more-2",
    "href": "W3_DataWranglingR.html#filter-some-more-2",
    "title": "03 Data Wrangling",
    "section": "Filter some more 2",
    "text": "Filter some more 2\n\nKeep only those observations with the name “Mary”.\nDiscard all observations with name “Mary” and keep only those from year &gt; 2000.\nKeep only those with names of former Queens (Mary, Elizabeth, Victoria).\nDiscard the ones with the Queen names!\n\nSecond task:\nThis might be difficult because you have two expressions, name != \"Mary\" and year &gt; 2000. You can simply add several expressions separated by commas in filter (commas are treated like a “logical and” &):\n\nno_marys_young &lt;- \n  babynames %&gt;% \n  filter(name != \"Mary\", year &gt; 2000)",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#filter-some-more-3",
    "href": "W3_DataWranglingR.html#filter-some-more-3",
    "title": "03 Data Wrangling",
    "section": "Filter some more 3",
    "text": "Filter some more 3\n\nKeep only those observations with the name “Mary”.\nDiscard all observations with name “Mary” and keep only those from year &gt; 2000.\nKeep only those with names of former Queens (Mary, Elizabeth, Victoria).\nDiscard the ones with the Queen names!\n\nThird task:\n\nqueens &lt;- \n  babynames %&gt;% \n  filter(\n    name == \"Mary\" | # the vertical line is a logical OR\n    name == \"Elizabeth\" | \n    name == \"Victoria\"\n  ) \n\n\nA better shorthand exists with the operator %in%:\n\nqueens &lt;- \n  babynames %&gt;% \n  filter(name %in% c(\"Mary\", \"Elizabeth\", \"Victoria\"))",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#filter-some-more-4",
    "href": "W3_DataWranglingR.html#filter-some-more-4",
    "title": "03 Data Wrangling",
    "section": "Filter some more 4",
    "text": "Filter some more 4\n\nKeep only those observations with the name “Mary”.\nDiscard all observations with name “Mary” and keep only those from year &gt; 2000.\nKeep only those with names of former Queens (Mary, Elizabeth, Victoria).\nDiscard the ones with the Queen names!\n\nFourth task:\nThis is very tricky! You could use three filters in a row with:\nname != \"Mary\", name != \"Elizabeth\", name != \"Victoria\".\nThere is no function “not in” but you can negate the result in two ways:\n\nno_queens &lt;- \n  babynames %&gt;% \n  filter(!name %in% c(\"Mary\", \"Elizabeth\", \"Victoria\")) # ! is a negation (\"not\")\n\nno_queens &lt;- \n  babynames %&gt;% \n  filter(name %in% c(\"Mary\", \"Elizabeth\", \"Victoria\") == FALSE)\n\n\nCareful with precedence! %in% is evaluated before !:\n!(name %in% c(\"Mary\", \"Elizabeth\", \"Victoria\"))\n=&gt; I prefer to add == FALSE in the end",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#your-first-plot",
    "href": "W3_DataWranglingR.html#your-first-plot",
    "title": "03 Data Wrangling",
    "section": "Your First Plot",
    "text": "Your First Plot\nIn your script, insert and run the following code:\n\nbabynames %&gt;% \n  filter(\n    sex == \"F\", # only female babies\n    name %in% c(\"Emily\", \"Kathleen\", \"Alexandra\", \"Beverly\") # reduce to these 4 names\n  ) %&gt;% \n  ggplot(aes(x = year, y = prop, colour = name)) +\n  geom_line(linewidth = 2) # plot data as a line (with increased size)\n\n\n\nAlter the code to check for male babies with the same names (change sex == \"F\" to sex == \"M\").\nOptional: Plot the absolute number n instead of the relative proportion prop.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#create-new-variables",
    "href": "W3_DataWranglingR.html#create-new-variables",
    "title": "03 Data Wrangling",
    "section": "Create New Variables",
    "text": "Create New Variables\nIf we want to create variables that do not exist yet (i.e. by calculating values, combining other variables, etc.), we can use mutate()!\n\nAdd a variable called “country” that contains the value “USA” for all observations\n\n\n\nbaby_where &lt;- \n  babynames %&gt;% \n  mutate(country = \"USA\")\n\n\n\nBut mutate is much more powerful and can create variables that differ per observation, depending on other values in the tibble/data frame:",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#create-new-variables-2",
    "href": "W3_DataWranglingR.html#create-new-variables-2",
    "title": "03 Data Wrangling",
    "section": "Create New Variables 2",
    "text": "Create New Variables 2\n\nCreate a variable that denotes the decade a baby was born:\n\n\n\n# we can only use floor to round down to full numbers =&gt; divide year by 10, floor it, and then multiply by 10 again\nbaby_decades &lt;- \n  babynames %&gt;% \n  mutate(decade = floor(year / 10) * 10) # round(year, -1) works but not floor(year, -1) :(\n\n\n\n# A tibble: 10 × 2\n    year decade\n   &lt;dbl&gt;  &lt;dbl&gt;\n 1  1906   1900\n 2  1911   1910\n 3  1916   1910\n 4  1919   1910\n 5  1927   1920\n 6  1960   1960\n 7  1983   1980\n 8  1989   1980\n 9  2001   2000\n10  2013   2010",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#summarizing",
    "href": "W3_DataWranglingR.html#summarizing",
    "title": "03 Data Wrangling",
    "section": "Summarizing",
    "text": "Summarizing\nThe goal of data wrangling is often to summarize (or aggregate) the data, e.g. to have an average value per condition. Sometimes you’d also want to calculate descriptive statistics to report.\n\nYou can do so using the function summarize():\n\n# run the filter function just like above again:\ndat &lt;- \n  babynames %&gt;% \n  filter(\n    name %in% c(\"Emily\", \"Kathleen\", \"Alexandra\", \"Beverly\"), \n    sex == \"F\"\n  )\n\n# summarize the data, calculating the number of oberservations:\ndat_sum &lt;- dat %&gt;% summarize(total = sum(n))\ndat_sum\n\n# A tibble: 1 × 1\n    total\n    &lt;int&gt;\n1 2161374",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#summarizing-2",
    "href": "W3_DataWranglingR.html#summarizing-2",
    "title": "03 Data Wrangling",
    "section": "Summarizing 2",
    "text": "Summarizing 2\n\ndat_sum\n\n# A tibble: 1 × 1\n    total\n    &lt;int&gt;\n1 2161374\n\n\nAs you can see, a new variable named total is created, which contains the total number of observations (in this case, it is different from the number of rows because each row already contains a count n).\nThere’s just one row in the resulting data frame, because summarize() reduces the data frame (to only include the necessary information)!",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#grouping-and-summarizing",
    "href": "W3_DataWranglingR.html#grouping-and-summarizing",
    "title": "03 Data Wrangling",
    "section": "Grouping and Summarizing",
    "text": "Grouping and Summarizing\nOften, we want to summarize data for specific subgroups. For this aim, summarize() has the .by parameter:\n\ngroup_sum &lt;- \n  dat %&gt;% \n  summarize(total = sum(n), .by = name) \n\ngroup_sum\n\n# A tibble: 4 × 2\n  name       total\n  &lt;chr&gt;      &lt;int&gt;\n1 Emily     841491\n2 Kathleen  711605\n3 Beverly   376914\n4 Alexandra 231364",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#grouping-and-summarizing-2",
    "href": "W3_DataWranglingR.html#grouping-and-summarizing-2",
    "title": "03 Data Wrangling",
    "section": "Grouping and Summarizing 2",
    "text": "Grouping and Summarizing 2\nYou can also subgroup by a combination of variables:\n\nbabynames %&gt;% \n  filter(name %in% c(\"Emily\", \"Kathleen\", \"Alexandra\", \"Beverly\")) %&gt;% # we start with the 4 names regardless of sex\n  summarize(\n    total = sum(n),\n    .by = c(name, sex) # and then summarize by name, separated for sex\n  )\n\n# A tibble: 8 × 3\n  name      sex    total\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n1 Emily     F     841491\n2 Kathleen  F     711605\n3 Beverly   M       4633\n4 Beverly   F     376914\n5 Alexandra F     231364\n6 Emily     M       1744\n7 Kathleen  M       1692\n8 Alexandra M        859",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#grouping-and-summarizing-3",
    "href": "W3_DataWranglingR.html#grouping-and-summarizing-3",
    "title": "03 Data Wrangling",
    "section": "Grouping and Summarizing 3",
    "text": "Grouping and Summarizing 3\nIn earlier versions, we had to use summarize() together with group_by():\n\ngroup_sum &lt;- dat %&gt;% group_by(name) %&gt;% summarize(total = sum(n)) \n\nWe avoid using group_by() like this because it can have unintended side effects.\nIt is just part of this class because you will likely encounter it in somebody else’s (old) code.\n\nIf you do have to use it, make sure to ungroup() after summarize() (or mutate()) to avoid unintended effects:\n\ngroup_sum &lt;- dat %&gt;% group_by(name) %&gt;% summarize(total = sum(n)) %&gt;% ungroup()\ngroup_sum &lt;- dat %&gt;% group_by(name) %&gt;% summarize(total = sum(n), .groups = \"drop\")\n\n\nUnintended side effects: grouping stays active and affects future calls to summarize or mutate, which may be hundreds of lines of code away!\n=&gt; Fatal when, e.g., calculating z-scores after having summarized the trial-level data into subject-level averages.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#grouping-and-summarizing-4",
    "href": "W3_DataWranglingR.html#grouping-and-summarizing-4",
    "title": "03 Data Wrangling",
    "section": "Grouping and Summarizing 4",
    "text": "Grouping and Summarizing 4\nUse the baby_decades data frame to calculate the mean and median number of observations, grouped by sex & decade.\n\n\nbaby_decades %&gt;% \n  summarize(\n    mean_year = mean(n),\n    median_year = median(n),\n    .by = c(sex, decade)\n  )\n\n# A tibble: 28 × 4\n   sex   decade mean_year median_year\n   &lt;chr&gt;  &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 F       1880     111.           13\n 2 M       1880     101.           12\n 3 F       1890     128.           13\n 4 M       1890      93.6          12\n 5 F       1900     131.           12\n 6 M       1900      94.4          12\n 7 F       1910     187.           12\n 8 M       1910     181.           12\n 9 F       1920     211.           12\n10 M       1920     227.           13\n# ℹ 18 more rows",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#counting-data",
    "href": "W3_DataWranglingR.html#counting-data",
    "title": "03 Data Wrangling",
    "section": "Counting Data",
    "text": "Counting Data\nThere are several ways to get the number of rows per group. You can use the function n() within a call to summarize() (or mutate()). A shortcut is to use count():\n\ndat %&gt;% summarize(n = n(), .by = name)\n\n# A tibble: 4 × 2\n  name          n\n  &lt;chr&gt;     &lt;int&gt;\n1 Emily       138\n2 Kathleen    138\n3 Beverly     122\n4 Alexandra   117\n\ndat %&gt;% count(name)\n\n# A tibble: 4 × 2\n  name          n\n  &lt;chr&gt;     &lt;int&gt;\n1 Alexandra   117\n2 Beverly     122\n3 Emily       138\n4 Kathleen    138\n\n\nInterestingly, the order of the output may vary. summarize() leaves the data in the original order (i.e., by prop, which (likely) translates to an order by n()). count() arranges the output by the variables for which the counting is done (here: alphabetically by name).",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#bigger-pipes",
    "href": "W3_DataWranglingR.html#bigger-pipes",
    "title": "03 Data Wrangling",
    "section": "Bigger Pipes!",
    "text": "Bigger Pipes!\nSo far we have often saved intermediate steps in tibbles and used those as input for the next function. With the pipe, we can chain several functions and save relevant results only, no need for crowding the environment with intermediate data.frames or tibbles!\n\npipe_summary &lt;- \n  babynames %&gt;%\n  mutate(decade = floor(year / 10) * 10) %&gt;%\n  filter(\n    name %in% c(\"Emily\", \"Kathleen\", \"Alexandra\", \"Beverly\"),\n    sex == \"F\"\n  ) %&gt;%\n  summarize(\n    mean_decade = mean(n),\n    .by = c(name, decade)\n  )\n\nIt’s not easy to decide which intermediate steps to save and which not. Usually, it involves some sort of trial and error. Sometimes you go back and break a pipe apart. Sometimes you get overwhelmed by the number of variables in your environment and create bigger pipes.\nAs a rule of thumb: If an intermediate step is only used once, you should probably delete it (unless it makes the code easier to comprehend).",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#tidy-data",
    "href": "W3_DataWranglingR.html#tidy-data",
    "title": "03 Data Wrangling",
    "section": "Tidy Data",
    "text": "Tidy Data\nTidy data: Data that is easily processed by tidyverse functions (also for visualizations and statistical analyses).\nThree principles:\n\nEach variable has its own column.\nEach observation has its own row.\nEach value has its own cell.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#tidy-data-wide-vs.-long-format",
    "href": "W3_DataWranglingR.html#tidy-data-wide-vs.-long-format",
    "title": "03 Data Wrangling",
    "section": "Tidy Data: wide vs. long format",
    "text": "Tidy Data: wide vs. long format\n\n\nWide format: Each participant/animal has one row;\nrepeated observations are in several columns\n\n\n\nID\nTime_1\nTime_2\n\n\n\n\na1\n230\n310\n\n\na2\n195\n220\n\n\na3\n245\n290\n\n\n\n\nLong format: Each observation has its own row;\nthere are (usually) several rows per participant\n\n\n\nID\nTime\nValue\n\n\n\n\na1\n1\n230\n\n\na1\n2\n310\n\n\na2\n1\n195\n\n\na3\n2\n220\n\n\na3\n1\n245\n\n\na3\n2\n290\n\n\n\n\n\n\nWide format implements a sparser representation of the data but less tidy!\nIf you want to convert Time from milliseconds into seconds, what do you have to do in both formats?\n\nData often does not come in this format but is rather messy! That’s why we wrangle.\nTidy data is in between wide and long (you can always go longer! :D)",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#tidy-data-2",
    "href": "W3_DataWranglingR.html#tidy-data-2",
    "title": "03 Data Wrangling",
    "section": "Tidy Data 2",
    "text": "Tidy Data 2\nWhat do you think, which of the following data sets is tidy?\n1:\n\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n2:\n\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n3:\n\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n4:\n\n\n# A tibble: 3 × 5\n  country     `1999_cases` `2000_cases` `1999_population` `2000_population`\n  &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;             &lt;dbl&gt;             &lt;dbl&gt;\n1 Afghanistan          745         2666          19987071          20595360\n2 Brazil             37737        80488         172006362         174504898\n3 China             212258       213766        1272915272        1280428583\n\n\n\n\nThe second table is the tidyest!\nTable 1 has cases and population mixed together in count variable.\nTable 3 mixes them in an awkward character row rate.\nTable 4 is standard wide format.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#analyzing-the-autism-spectrum-quotient",
    "href": "W3_DataWranglingR.html#analyzing-the-autism-spectrum-quotient",
    "title": "03 Data Wrangling",
    "section": "Analyzing the Autism Spectrum Quotient",
    "text": "Analyzing the Autism Spectrum Quotient\nFor the following activities, we will need the following files:\n\nresponses.csv containing the AQ survey responses to each of the 10 questions for the 66 participants\nqformats.csv containing information on how a question should be coded - i.e. forward or reverse coding\nscoring.csv containing information on how many points a specific response should get; depending on whether it is forward or reverse coded\npinfo.csv containing participant information such as Age, Sex and importantly ID number.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#set-up",
    "href": "W3_DataWranglingR.html#set-up",
    "title": "03 Data Wrangling",
    "section": "Set Up",
    "text": "Set Up\n\nCreate a new script, e.g. as “DataWrangling3.R” (remember we skipped #2 in the book).\nDownload the data into your project folder:\nresponses.csv\nqformats.csv\nscoring.csv\npinfo.csv\nClear your environment (the brush in the top right pane) and/or restart the R session (Session -&gt; Restart R).\nLoad the four .csv files into your environment, e.g.:\n\n\nlibrary(tidyverse)\nresponses &lt;- read_csv(\"responses.csv\") \nqformats &lt;- read_csv(\"qformats.csv\")\nscoring &lt;- read_csv(\"scoring.csv\")\npinfo &lt;- read_csv(\"pinfo.csv\")",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#look-at-the-data-1",
    "href": "W3_DataWranglingR.html#look-at-the-data-1",
    "title": "03 Data Wrangling",
    "section": "Look at the Data",
    "text": "Look at the Data\nIs the data (responses) in a tidy format?\n\n\n# A tibble: 6 × 11\n     Id Q1                 Q2    Q3    Q4    Q5    Q6    Q7    Q8    Q9    Q10  \n  &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1    16 Slightly Disagree  Defi… Slig… Defi… Slig… Slig… Slig… Defi… Slig… Slig…\n2    17 Definitely Agree   Slig… Slig… Defi… Defi… Defi… Slig… Slig… Slig… Slig…\n3    18 Definitely Agree   Defi… Slig… Defi… Defi… Defi… Slig… Defi… Defi… Defi…\n4    19 Definitely Agree   Defi… Defi… Slig… Defi… Defi… Slig… Slig… Defi… Slig…\n5    20 Definitely Disagr… Slig… Defi… Slig… Slig… Slig… Slig… Slig… Slig… Slig…\n6    21 Slightly Disagree  Slig… Defi… Slig… Slig… Slig… Defi… Defi… Slig… Slig…\n\n\n\nWhy is it not tidy?\n\nwide format",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#reformatting-the-data",
    "href": "W3_DataWranglingR.html#reformatting-the-data",
    "title": "03 Data Wrangling",
    "section": "Reformatting the Data",
    "text": "Reformatting the Data\nLet’s bring the wide data in a longer, tidy format!\n\nThere are several functions in R to reformat data, but the newest ones are pivot_longer() and pivot_wider().\nRun the code and see what changes:\n\nrlong &lt;- \n  responses %&gt;% \n  pivot_longer(\n    cols = Q1:Q10, # we can select a range of column names\n    # cols = starts_with(\"Q\"), # alternative\n    names_to = \"Question\", \n    values_to = \"Response\"\n  )\n\n\n\nDescribe what the function does, what does the input/the arguments mean?",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#joining-the-data",
    "href": "W3_DataWranglingR.html#joining-the-data",
    "title": "03 Data Wrangling",
    "section": "Joining the Data",
    "text": "Joining the Data\nWe now want to combine the different data sets: We want to have the information how the questionnaire has to be scored included with the items.\nWe can find the scoring information (i.e. how the questions are framed, positive or negative/whether they need to be reversed) in the qformats tibble. Furthermore, we can find how many points are given to each item/response in scoring.\nWe can use the function inner_join() to merge the tibbles into one bigger tibble.\n\nActivity: Replace the NULL values in the below code with the necessary variable names to join rlong and qformats by Question.\n\nrlong2 &lt;- \n  inner_join(x = NULL, y = NULL, by = \"NULL\")\n\n\n\n\nrlong2 &lt;- \n  inner_join(\n    x = rlong, \n    y = qformats, \n    by = \"Question\"\n  )\n\n\nDescribe what happened?\nwhat is forward and reverse scoring?",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#combining-more-data",
    "href": "W3_DataWranglingR.html#combining-more-data",
    "title": "03 Data Wrangling",
    "section": "Combining more Data",
    "text": "Combining more Data\nYou can only join two data frames/tibbles at once.\nNow add the scoring data:\n\nrscores &lt;- \n  rlong2 %&gt;% \n  inner_join(\n    scoring, \n    c(\"QFormat\", \"Response\")\n  )\n\n\nYou can also let the function figure out by itself which columns should be used for joining:\n\nrscores &lt;- inner_join(rlong2, scoring)\n\nJoining with `by = join_by(Response, QFormat)`\n\n\n\n\nAnd if you are happy with the result, copy the information into your code to make the join explicit:\n\nrscores &lt;- inner_join(rlong2, scoring, \n                      by = join_by(Response, QFormat)) #same as by = c(\"QFormat\", \"Response\")",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#calculate-the-questionnaire-scores",
    "href": "W3_DataWranglingR.html#calculate-the-questionnaire-scores",
    "title": "03 Data Wrangling",
    "section": "Calculate the Questionnaire Scores",
    "text": "Calculate the Questionnaire Scores\nHow do we need to group and summarize the data to get a sum score per person? (Ignoring the reverse coding for now!) Add the correct column names instead of the NULL.\n\naq_scores &lt;- \n  rscores %&gt;% \n  summarize(\n    AQ = sum(NULL), \n    .by = NULL\n  )\n\n\n\naq_scores &lt;- \n  rscores %&gt;% \n  summarize(\n    AQ = sum(Score), # sum column Score to obtain AQ scores.\n    .by = Id # separately for each Id (participant)\n  )",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#pipe-it-all-together",
    "href": "W3_DataWranglingR.html#pipe-it-all-together",
    "title": "03 Data Wrangling",
    "section": "Pipe it all together!",
    "text": "Pipe it all together!\n\naq_scores2 &lt;- \n  responses %&gt;% \n  pivot_longer(\n    cols = Q1:Q10,\n    names_to = \"Question\", \n    values_to = \"Response\"\n  ) %&gt;%  \n  inner_join(qformats, \"Question\") %&gt;% \n  inner_join(scoring, c(\"QFormat\", \"Response\")) %&gt;% \n  summarize(AQ = sum(Score), .by = Id)",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#background",
    "href": "W3_DataWranglingR.html#background",
    "title": "03 Data Wrangling",
    "section": "Background",
    "text": "Background\nWe’ll use data from a paper that investigates whether the ability to perform an action influences perception. In particular, the authors wondered whether participants who played Pong would perceive the ball to move faster when they have a small paddle.\n\n\nDownload the data, create a new script.\nClear the environment if you prefer.\nLook at the data.",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#solutions",
    "href": "W3_DataWranglingR.html#solutions",
    "title": "03 Data Wrangling",
    "section": "Solutions",
    "text": "Solutions\n\nlibrary(\"tidyverse\")\npong_data &lt;- read_csv(\"Data/PongBlueRedBack 1-16 Codebook.csv\") # I put the data into a separate subfolder \"Data\"\nsummary(pong_data)\n\n  Participant     JudgedSpeed      PaddleLength   BallSpeed    TrialNumber    \n Min.   : 1.00   Min.   :0.0000   Min.   : 50   Min.   :2.0   Min.   :  1.00  \n 1st Qu.: 4.75   1st Qu.:0.0000   1st Qu.: 50   1st Qu.:3.0   1st Qu.: 72.75  \n Median : 8.50   Median :1.0000   Median :150   Median :4.5   Median :144.50  \n Mean   : 8.50   Mean   :0.5471   Mean   :150   Mean   :4.5   Mean   :144.50  \n 3rd Qu.:12.25   3rd Qu.:1.0000   3rd Qu.:250   3rd Qu.:6.0   3rd Qu.:216.25  \n Max.   :16.00   Max.   :1.0000   Max.   :250   Max.   :7.0   Max.   :288.00  \n BackgroundColor      HitOrMiss       BlockNumber   \n Length:4608        Min.   :0.0000   Min.   : 1.00  \n Class :character   1st Qu.:0.0000   1st Qu.: 3.75  \n Mode  :character   Median :1.0000   Median : 6.50  \n                    Mean   :0.6866   Mean   : 6.50  \n                    3rd Qu.:1.0000   3rd Qu.: 9.25  \n                    Max.   :1.0000   Max.   :12.00  \n\n# look at the data (can also use summary(), str(), head() etc.)\nglimpse(pong_data)\n\nRows: 4,608\nColumns: 8\n$ Participant     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ JudgedSpeed     &lt;dbl&gt; 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, …\n$ PaddleLength    &lt;dbl&gt; 50, 250, 50, 250, 250, 50, 250, 50, 250, 50, 50, 250, …\n$ BallSpeed       &lt;dbl&gt; 5, 3, 4, 3, 7, 5, 6, 2, 4, 4, 7, 7, 3, 6, 5, 7, 2, 5, …\n$ TrialNumber     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ BackgroundColor &lt;chr&gt; \"red\", \"blue\", \"red\", \"red\", \"blue\", \"blue\", \"red\", \"r…\n$ HitOrMiss       &lt;dbl&gt; 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, …\n$ BlockNumber     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W3_DataWranglingR.html#solutions-2",
    "href": "W3_DataWranglingR.html#solutions-2",
    "title": "03 Data Wrangling",
    "section": "Solutions 2",
    "text": "Solutions 2\n\nnew_pong_data &lt;- pong_data %&gt;% \n  select(BallSpeed, HitOrMiss, JudgedSpeed, Participant, TrialNumber) %&gt;% \n  arrange(desc(HitOrMiss), desc(JudgedSpeed)) %&gt;% \n  filter(\n    JudgedSpeed == 1,\n    BallSpeed %in% c(\"2\", \"4\", \"5\", \"7\"),\n    HitOrMiss == 0\n  ) %&gt;% \n  filter(TrialNumber &gt; 2) %&gt;% \n  mutate(TrialNumber = TrialNumber -1) \n  \n  # summarize (use old data frame because we removed variables)\npong_data_hits &lt;- \n  pong_data %&gt;% \n  summarize(\n    total_hits = sum(HitOrMiss, na.rm = TRUE),\n    meanhits = mean(HitOrMiss, na.rm = TRUE),\n    .by = c(BackgroundColor, PaddleLength)\n  )",
    "crumbs": [
      "03 Data Wrangling"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#ggplot",
    "href": "W4_DataVizR.html#ggplot",
    "title": "04 Data Visualization",
    "section": "ggplot",
    "text": "ggplot\nWe will use a package called ggplot2 (part of the tidyverse). ggplot2 is a very versatile package that allows us to make beautiful, publication-ready(-ish) figures.\nggplot2 follows the “grammar of graphics” by Leland Wilkinson, a formal guide to visualization principles. A core feature are the layers each plot consists of. The main function to “start” plotting is ggplot() - we will then add layers of data and layers to tweak the appearance.\n\nLayers of a ggplot",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#activity-1-set-up",
    "href": "W4_DataVizR.html#activity-1-set-up",
    "title": "04 Data Visualization",
    "section": "Activity 1: Set Up",
    "text": "Activity 1: Set Up\n\nWithin your biostats project in RStudio, create a new script called DataVisualisation1.R.\nMake sure you have the following two files downloaded into your project folder (we already used them in Intro to R presentation): ahi-cesd.csv and participant-info.csv.\nCopy and run the code below to load the tidyverse package and the data files:\n\n\nlibrary(tidyverse) \n\ndat &lt;- read_csv(\"ahi-cesd.csv\")\npinfo &lt;- read_csv(\"participant-info.csv\")",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#activity-1-set-up-1",
    "href": "W4_DataVizR.html#activity-1-set-up-1",
    "title": "04 Data Visualization",
    "section": "Activity 1: Set Up",
    "text": "Activity 1: Set Up\n\nRun the following code to combine both files and select our variables of interest:\n\n\nall_dat &lt;- \n  dat %&gt;% \n  inner_join(\n    pinfo, # combine dat with pinfo\n    by = c(\"id\", \"intervention\") # common variables that tell R which data belongs together\n  ) %&gt;% \n  arrange(id, occasion) #joining messes up the order of the data frame =&gt; arrange again\n\n# we throw out several variables even though they would be important for a comprehensive data analysis\nsummarydata &lt;- \n  all_dat %&gt;% \n  select(\n    id, ahiTotal, cesdTotal, # ID & questionnaire scores\n    sex, age, educ, income # demographic variables\n  ) \n\n\nwhat happens in the code chunk?",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#look-at-the-data",
    "href": "W4_DataVizR.html#look-at-the-data",
    "title": "04 Data Visualization",
    "section": "Look at the Data",
    "text": "Look at the Data\nHave a look at the types of data:\n\nglimpse(summarydata)\n\nRows: 992\nColumns: 7\n$ id        &lt;dbl&gt; 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, …\n$ ahiTotal  &lt;dbl&gt; 63, 73, 73, 89, 89, 93, 80, 77, 77, 85, 60, 67, 56, 61, 41, …\n$ cesdTotal &lt;dbl&gt; 14, 6, 7, 10, 13, 8, 15, 12, 3, 5, 31, 31, 41, 35, 27, 32, 2…\n$ sex       &lt;dbl&gt; 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, …\n$ age       &lt;dbl&gt; 35, 35, 59, 59, 59, 59, 59, 59, 51, 51, 50, 50, 50, 50, 58, …\n$ educ      &lt;dbl&gt; 5, 5, 1, 1, 1, 1, 1, 1, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n$ income    &lt;dbl&gt; 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, …\n\n\nWhat do you see?\n\nAll variables are loaded as numeric. However, are all of those numeric?\n\n\nsex, educ and income don’t seem to really be numbers but factors with individual categories (factor levels)!\nWe should convert these data to factor. Checking and adjusting data types (as part of data wrangling) will be important for plotting and analyzing the data, you might otherwise get strange/wrong results!",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#activity-2-transform-to-factor",
    "href": "W4_DataVizR.html#activity-2-transform-to-factor",
    "title": "04 Data Visualization",
    "section": "Activity 2: Transform to factor",
    "text": "Activity 2: Transform to factor\nCopy and run the below code to change the categories to factors.\n\nsummarydata1 &lt;- \n  summarydata %&gt;%\n  mutate(\n    sex = as_factor(sex),\n    educ = as_factor(educ),\n    income = as_factor(income)\n  )\n\n\n\nIf you mutate a new column with the same name as the old one, it will overwrite the column.\n\n\n\n\nglimpse(summarydata1)\n\nRows: 992\nColumns: 7\n$ id        &lt;dbl&gt; 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, …\n$ ahiTotal  &lt;dbl&gt; 63, 73, 73, 89, 89, 93, 80, 77, 77, 85, 60, 67, 56, 61, 41, …\n$ cesdTotal &lt;dbl&gt; 14, 6, 7, 10, 13, 8, 15, 12, 3, 5, 31, 31, 41, 35, 27, 32, 2…\n$ sex       &lt;fct&gt; 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, …\n$ age       &lt;dbl&gt; 35, 35, 59, 59, 59, 59, 59, 59, 51, 51, 50, 50, 50, 50, 58, …\n$ educ      &lt;fct&gt; 5, 5, 1, 1, 1, 1, 1, 1, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n$ income    &lt;fct&gt; 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, …",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#activity-2-transform-to-factor-1",
    "href": "W4_DataVizR.html#activity-2-transform-to-factor-1",
    "title": "04 Data Visualization",
    "section": "Activity 2: Transform to factor",
    "text": "Activity 2: Transform to factor\n\nglimpse(summarydata1)\n\nRows: 992\nColumns: 7\n$ id        &lt;dbl&gt; 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, …\n$ ahiTotal  &lt;dbl&gt; 63, 73, 73, 89, 89, 93, 80, 77, 77, 85, 60, 67, 56, 61, 41, …\n$ cesdTotal &lt;dbl&gt; 14, 6, 7, 10, 13, 8, 15, 12, 3, 5, 31, 31, 41, 35, 27, 32, 2…\n$ sex       &lt;fct&gt; 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, …\n$ age       &lt;dbl&gt; 35, 35, 59, 59, 59, 59, 59, 59, 51, 51, 50, 50, 50, 50, 58, …\n$ educ      &lt;fct&gt; 5, 5, 1, 1, 1, 1, 1, 1, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n$ income    &lt;fct&gt; 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, …\n\n\n\n\nsummarydata1 %&gt;% pull(educ) %&gt;% unique()\n\n[1] 5 1 4 2 3\nLevels: 1 2 3 4 5\n\n\n\n\n\nAt first glance, the data look the same. But the 1s and 2s in sex are now e.g. not treated as numbers anymore, but as factor levels (categories). This e.g. changes how the data behave in different analyses, or plotting (continuous vs. categorical data).",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#set-labels",
    "href": "W4_DataVizR.html#set-labels",
    "title": "04 Data Visualization",
    "section": "Set labels",
    "text": "Set labels\nA simple change to a factor is not always helpful. We still don’t know what a 1 in sex or a 5 in educ stands for:\n\nsex: 1 = female, 2 = male\neduc: 1 = no graduation, 2 = school graduation, 3 = vocational training, 4 = bachelor’s degree, 5 = post graduate\nincome: 1 = low, 2 = middle, 3 = high\n\n\n\nThere is very sparse information on the variables at https://doi.org/10.5334/jopd.35, so I guesstimated some of the factor levels.",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#set-labels-1",
    "href": "W4_DataVizR.html#set-labels-1",
    "title": "04 Data Visualization",
    "section": "Set labels",
    "text": "Set labels\nmatch_case() allows us to label our numeric data with more human-readable descriptions. if_else() is a useful shorthand for cases where we only have two categories.\n\nsummarydata2 &lt;- \n  summarydata %&gt;% \n  mutate(\n    sex = if_else(sex == 1, \"female\", \"male\") %&gt;% as_factor(), #wrong if non-binary entries exist\n    educ = educ %&gt;% \n      case_match(\n        1 ~ \"no graduation\",\n        2 ~ \"school graduation\",\n        3 ~ \"vocational training\",\n        4 ~ \"bachelor's degree\",\n        5 ~ \"post grad\"\n      ) %&gt;%\n      as_factor(), # need to transform to factor in the end\n    income = income %&gt;% \n      case_match(1 ~ \"low\", 2 ~ \"middle\", 3 ~ \"high\") %&gt;% \n      as_factor()\n  )",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#set-labels-2",
    "href": "W4_DataVizR.html#set-labels-2",
    "title": "04 Data Visualization",
    "section": "Set labels",
    "text": "Set labels\n\nsummarydata2 %&gt;% pull(educ) %&gt;% unique()\n\n[1] post grad           no graduation       bachelor's degree  \n[4] school graduation   vocational training\n5 Levels: post grad no graduation bachelor's degree ... vocational training\n\n\nFactor is now ordered by occurrence in data! :( (E.g., the order on the axis of a plot would be wrong.)",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#set-factor-order-levels",
    "href": "W4_DataVizR.html#set-factor-order-levels",
    "title": "04 Data Visualization",
    "section": "Set factor order (levels)",
    "text": "Set factor order (levels)\nUsing factor(), we can explicitly order the categories using the argument levels.\n\nsummarydata %&gt;% \n  mutate(\n    income = income %&gt;%\n      case_match(1 ~ \"low\", 2 ~ \"middle\", 3 ~ \"high\") %&gt;% \n      as_factor()\n  ) %&gt;% \n  pull(income) %&gt;% unique()\n\n[1] high   low    middle\nLevels: high low middle\n\n\n\nsummarydata %&gt;% \n  mutate(\n    income = income %&gt;% \n      case_match(1 ~ \"low\", 2 ~ \"middle\", 3 ~ \"high\") %&gt;% \n      factor(levels = c(\"low\", \"middle\", \"high\")) # factor(), not as_factor()!\n  ) %&gt;% \n  pull(income) %&gt;% unique()\n\n[1] high   low    middle\nLevels: low middle high",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#put-it-all-together",
    "href": "W4_DataVizR.html#put-it-all-together",
    "title": "04 Data Visualization",
    "section": "Put it all together",
    "text": "Put it all together\nIn this case, we can arrange the data by the numerical values before switching them to text labels.\n\nsummarydata3 &lt;- \n  summarydata %&gt;% \n  arrange(sex, educ, income) %&gt;% # can be a problem if some condition combinations don't exist\n  mutate(\n    sex = if_else(sex == 1, \"female\", \"male\") %&gt;% as_factor(), # wrong if non-binary entries exist\n    educ = educ %&gt;% \n      case_match(\n        1 ~ \"no graduation\",\n        2 ~ \"school graduation\",\n        3 ~ \"vocational training\",\n        4 ~ \"bachelor's degree\",\n        5 ~ \"post grad\"\n      ) %&gt;%\n      as_factor(),\n    income = income %&gt;% \n      case_match(1 ~ \"low\", 2 ~ \"middle\", 3 ~ \"high\") %&gt;% \n      as_factor()\n  )\n\n# summarydata3 %&gt;% select(sex, educ, income) %&gt;% summary()",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#the-first-layer",
    "href": "W4_DataVizR.html#the-first-layer",
    "title": "04 Data Visualization",
    "section": "The First Layer",
    "text": "The First Layer\n\nThe first line (or layer) sets up the base of the graph: the data to use and the aesthetics (aes()) (what will go on the x and y axis, how the plot will be grouped).\naes() includes anything that is directly related to your data: e.g., what goes on the x and y axis, or whether the plot should be grouped by a variable in your data.\nWe can provide x and y as arguments, however, in a bar plot, the count per category is calculated automatically, so we don’t need to put anything on the y-axis ourselves.\n\n\n\nggplot(summarydata3, aes(x = sex))",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#the-second-layer",
    "href": "W4_DataVizR.html#the-second-layer",
    "title": "04 Data Visualization",
    "section": "The Second Layer",
    "text": "The Second Layer\nThe next layer adds a geom or a shape. In this case we use geom_bar() as we want to draw a bar plot.\n\nNote that we are adding layers, using a + between layers. This is a very important difference between pipes and visualization.\n\n\n\nggplot(summarydata3, aes(x = sex)) +\n  geom_bar()",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#the-second-layer-with-color",
    "href": "W4_DataVizR.html#the-second-layer-with-color",
    "title": "04 Data Visualization",
    "section": "The Second Layer with color",
    "text": "The Second Layer with color\n\nAdding fill to the first layer will separate the data into each level of the grouping variable and fill it with a different color. Note that fill colors the inside of the bar, while color colors the bar’s outlines.\nWe can get rid of the (in this case redundant legend) with show.legend = FALSE.\n\n\n\nggplot(summarydata3, aes(x = sex, fill = sex)) +\n  geom_bar() #geom_bar(show.legend = FALSE)",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#the-next-layers---improving-the-plot",
    "href": "W4_DataVizR.html#the-next-layers---improving-the-plot",
    "title": "04 Data Visualization",
    "section": "The Next Layers - Improving the Plot",
    "text": "The Next Layers - Improving the Plot\nWe might want to make the plot a bit prettier and easier to read. What would you improve?\n\nWe could add better axis labels, and custom colors. We can do so with the functions scale_x_discrete() and scale_y_continuous(), which adjust the x and y axes.\nBoth functions can change several aspects of our axes; here, we use the argument name to set a new axis name.\n\n\nggplot(summarydata3, aes(x = sex, fill = sex)) +\n  geom_bar(show.legend = FALSE) +\n  scale_x_discrete(name = \"Participant Sex\") + \n  scale_y_continuous(name = \"Number of participants\")\n\n\n\n\n\n\n\n\n\n\n\nThere’s also the counterparts scale_x_continuous() and scale_y_discrete(). What do you think, why do we use the ones mentioned above and when would we use the other ones?",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#themes-changing-the-appearance",
    "href": "W4_DataVizR.html#themes-changing-the-appearance",
    "title": "04 Data Visualization",
    "section": "Themes: Changing the Appearance",
    "text": "Themes: Changing the Appearance\nThere are a number of built-in themes that you can use to change the appearance (background, whether axes are shown etc.), but you can also tweak the themes further manually.\nWe will now change the default theme to theme_minimal(), but you can also try other themes (just type “theme_” and see what the autocomplete brings up).\n\n\nggplot(summarydata3, aes(x = sex, fill = sex)) +\n  geom_bar(show.legend = FALSE) +\n  scale_x_discrete(name = \"Participant Sex\") + \n  scale_y_continuous(name = \"Number of participants\") +\n  theme_minimal()",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#colors",
    "href": "W4_DataVizR.html#colors",
    "title": "04 Data Visualization",
    "section": "Colors",
    "text": "Colors\nThere are various ways to change the colors of the bars. You can manually indicate the colors you want to use but you can also easily use pre-determined color palettes that are already checked for color-blind friendliness.\nA popular palette is viridis. We can simply add a function/layer to your ggplot named scale_fill_viridis_d() (d for discrete). The function has an option parameter that takes 5 different values (A - E).\n\nRun the code below. Try changing the option to either A, B, C or D and see which one you like!\n\n\n\nggplot(summarydata3, aes(x = sex, fill = sex)) +\n  geom_bar(show.legend = FALSE) +\n  scale_x_discrete(name = \"Participant Sex\") +\n  scale_y_continuous(name = \"Number of participants\") +\n  theme_minimal() +\n  scale_fill_viridis_d(option = \"E\")",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#transparency",
    "href": "W4_DataVizR.html#transparency",
    "title": "04 Data Visualization",
    "section": "Transparency",
    "text": "Transparency\nYou can also add transparency to your plot, which can be helpful if you plot several layers of data that overlap.\nTo do so, you can simply add alpha to the geom_bar() - try changing the value of alpha (between 0 and 1):\n\n\nggplot(summarydata3, aes(x = sex, fill = sex)) +\n  geom_bar(show.legend = FALSE, \n           alpha = .8) +\n  scale_x_discrete(name = \"Participant Sex\") +\n  scale_y_continuous(name = \"Number of participants\") +\n  theme_minimal() +\n  scale_fill_viridis_d(option = \"E\")",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#grouped-plots",
    "href": "W4_DataVizR.html#grouped-plots",
    "title": "04 Data Visualization",
    "section": "Grouped Plots",
    "text": "Grouped Plots\nImagine that you have several factors that you want to use to group your data, such as gender and income. In this case, you could use a grouped bar plot:\n\n\nggplot(summarydata3, aes(x = sex, fill = income)) +\n  geom_bar(\n    # the default are stacked bars; we use \"dodge\" to put them side by side\n    position = \"dodge\",\n    alpha = .8\n  ) +\n  scale_x_discrete(name = \"Participant Sex\") +\n  scale_y_continuous(name = \"Number of participants\") +\n  theme_minimal() +\n  scale_fill_viridis_d(option = \"E\")\n\n\n\n\n\n\n\n\n\n\n\nWithout position = dodge, you would get a stacked barplot",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#facetting",
    "href": "W4_DataVizR.html#facetting",
    "title": "04 Data Visualization",
    "section": "Facetting",
    "text": "Facetting\nYou could also use facets to divide your data visualizations into several subplots: facet_wrap for one variable.\n\nggplot(summarydata3, aes(x = sex, fill = sex)) +\n  geom_bar(show.legend = FALSE, alpha = .8) +\n  scale_x_discrete(name = \"Participant Sex\") +\n  scale_y_continuous(name = \"Number of participants\") +\n  theme_minimal() +\n  scale_fill_viridis_d(option = \"E\")  +\n  facet_wrap(vars(income)) # here, you need to use vars() around variable names\n\n\n\nWhat is problematic here? We needed percentages for females and males for a better comparison",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#facetting-2",
    "href": "W4_DataVizR.html#facetting-2",
    "title": "04 Data Visualization",
    "section": "Facetting 2",
    "text": "Facetting 2\nYou could also use facets to divide your data visualizations into several subplots: facet_grid for a matrix of (combinations of) two variables.\n\nggplot(summarydata3, aes(x = sex, fill = sex)) +\n  geom_bar(show.legend = FALSE, alpha = .8) +\n  scale_x_discrete(name = \"Participant Sex\") +\n  scale_y_continuous(name = \"Number of participants\") +\n  theme_minimal() +\n  scale_fill_viridis_d(option = \"E\")  +\n  facet_grid(\n    rows = vars(income),\n    cols = vars(educ),\n    labeller = \"label_both\" # this adds the variable name into the facet legends\n  )",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#a-closer-look",
    "href": "W4_DataVizR.html#a-closer-look",
    "title": "04 Data Visualization",
    "section": "A closer look",
    "text": "A closer look",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#violin-boxplot",
    "href": "W4_DataVizR.html#violin-boxplot",
    "title": "04 Data Visualization",
    "section": "Violin-Boxplot",
    "text": "Violin-Boxplot\nLet’s look at the code. How does the code differ from the one for the barplot above?\n\n\nggplot(summarydata3, aes(x = income, \n                         y = ahiTotal, # new variable!\n                         fill = income)) +\n  geom_violin(trim = FALSE, # smooth on edges\n              alpha = .4) +\n  geom_boxplot(width = .2, # small boxplot contained in violin\n               alpha = .7) +\n  scale_x_discrete(\n    name = \"Income\",\n    # set new labels\n    labels = c(\"Below Average\", \"Average\", \"Above Average\")) +\n  scale_y_continuous(name = \"Authentic Happiness Inventory Score\")+\n  theme_minimal() +\n  # no need to switch of axis for every geom individually\n  theme(legend.position = \"none\") + \n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n\n\n\nIn this case, not the count on the y-axis, but another cont. variable!",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#layer-order",
    "href": "W4_DataVizR.html#layer-order",
    "title": "04 Data Visualization",
    "section": "Layer Order",
    "text": "Layer Order\nThe order of layers is crucial, as the plot will be built up in that order (later layers on top):\n\n\n\nggplot(summarydata3, aes(x = income, y = ahiTotal)) +\n  geom_violin() +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nggplot(summarydata3, aes(x = income, y = ahiTotal)) +\n  geom_boxplot() +\n  geom_violin()",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#scatterplot",
    "href": "W4_DataVizR.html#scatterplot",
    "title": "04 Data Visualization",
    "section": "Scatterplot",
    "text": "Scatterplot\nIf we have continuous data of two variables, we often want to make a scatter plot:\n\n\nggplot(summarydata3, aes(x = age, y = cesdTotal)) +\n  geom_point() +\n  # if you don't want the shaded CI, add se = FALSE to this\n  geom_smooth(method = lm)",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#saving-your-figures",
    "href": "W4_DataVizR.html#saving-your-figures",
    "title": "04 Data Visualization",
    "section": "Saving your Figures",
    "text": "Saving your Figures\nYou can use ggsave() to save your plots. If you don’t tell ggsave() which plot you want to save, by default it will save the last plot you created.\nYou just have to enter the name of the file to be saved (in your working directory) like this:\n\nggsave(\"violin-boxplot.png\")\n\nCheck whether indeed the last plot was saved!\n\nYou can also specify the dimensions of your plot to be saved:\n\nggsave(\"violin-boxplot.png\",\n       width = 6.5, #width of a typical page in inches minus border (according to APA format)\n       height = 6.5 / sqrt(2), #golden ratio :)\n       units = \"in\")\n\nor\n\nggsave(\"violin-boxplot.png\",\n       width = 1920,\n       height = 1080,\n       units = \"px\") #full HD picture in pixels: 1920 x 1080",
    "crumbs": [
      "04 Data Visualization"
    ]
  },
  {
    "objectID": "W4_DataVizR.html#saving-your-figures-2",
    "href": "W4_DataVizR.html#saving-your-figures-2",
    "title": "04 Data Visualization",
    "section": "Saving your Figures 2",
    "text": "Saving your Figures 2\nYou can also assign the plot to a variable in your environment and then tell ggsave() which object to save. This is a bit safer.\nRun the code for the violin-boxplot again and save the plot in an object called viobox. You’d then have to explicitly tell ggsave() to save the object viobox:\n\nviobox &lt;- \n  ggplot(summarydata3, aes(x = income, y = ahiTotal, fill = income)) +\n  geom_violin(trim = FALSE, alpha = .4) +\n  geom_boxplot(width = .2, alpha = .7) +\n  scale_x_discrete(\n    name = \"Income\",\n    labels = c(\"Below Average\", \"Average\", \"Above Average\")) +\n  scale_y_continuous(name = \"Authentic Happiness Inventory Score\")+\n  theme_minimal() +\n  theme(legend.position = \"none\") + \n  scale_fill_viridis_d()\n\nggsave(\"violin-boxplot-stored.png\", plot = viobox)\n\n\nDo not add ggsave() to the plot with a +. Instead run it on a separate line!\nIf plot is assigned to object, it won’t be displayed unless you type viobox in the console!",
    "crumbs": [
      "04 Data Visualization"
    ]
  }
]